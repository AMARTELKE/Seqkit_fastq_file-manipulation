{
    "docs": [
        {
            "location": "/", 
            "text": "fakit - a cross-platform and efficient toolkit for FASTA/Q file manipulation\n\n\nDocuments  : \nhttp://shenwei356.github.io/fakit\n\n\nSource code: \nhttps://github.com/shenwei356/fakit\n\n\nAbout the name\n\n\nOriginally, \nfakit\n (abbreviation of \nFASTA kit\n) was designed to handle FASTA\nformat. And the name was remained after adding \nseamless support for FASTA/Q fromat\n.\n\n\nIntroduction\n\n\nFASTA and FASTQ are basic formats for storing nucleotide and protein sequences.\nThe manipulations of FASTA/Q file include converting, clipping, searching,\nfiltering, deduplication, splitting, shuffling, sampling and so on.\nExisted tools only implemented parts of the functions,\nand some of them are only available for specific operating systems.\nFurthermore, the complicated installation process of dependencies packages and\nrunning environment also make them less friendly to common users.\n\n\nfakit is a cross-platform, efficient, and practical FASTA/Q manipulations tool\nthat is friendly for researchers to complete wide ranges of FASTA file processing.\nThe toolkit supports plain or gzip-compressed input and output\nfrom either standard stream or files,\ntherefore, it could be easily used in command-line pipe.\n\n\nFeatures\n\n\n\n\nCross-platform\n (Linux/Windows/Mac OS X/OpenBSD/FreeBSD,\n  see \ndownload\n)\n\n\nLight weight and out-of-the-box, no dependencies, no compilation, no configuration\n\n  (see \ndownload\n)\n\n\nFast\n (see \nbenchmark\n),\n  \nmultiple-CPUs supported\n.\n\n\nPractical functions supported by 19 subcommands\n (see subcommands and\n  \nusage\n )\n\n\nWell documented\n (detailed \nusage\n\n  and \nbenchmark\n )\n\n\nSeamlessly parses both FASTA and FASTQ formats\n\n\nSupport STDIN and gziped input/output file, easy being used in pipe\n\n\nSupport custom sequence ID regular expression\n (especially useful for quering with ID list)\n\n\nReproducible results (configurable rand seed in \nsample\n and \nshuffle\n)\n\n\nWell organized source code, friendly to use and easy to extend.\n\n\n\n\nFeatures comparison\n\n\n\n\n\n\n\n\nFeatures\n\n\nfakit\n\n\nfasta_utilities\n\n\nfastx_toolkit\n\n\npyfaidx\n\n\nseqmagick\n\n\nseqtk\n\n\n\n\n\n\n\n\n\n\nCross-platform\n\n\nYes\n\n\nPartly\n\n\nPartly\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nMutli-line FASTA\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nRead FASTQ\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nMutli-line FASTQ\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nValidate bases\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\n\n\n\n\nRecognize RNA\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nRead STDIN\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nRead gzip\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nWrite gzip\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\nYes\n\n\n--\n\n\n\n\n\n\nSearch by motifs\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\n--\n\n\n\n\n\n\nSample seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nSubseq\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nDeduplicate seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\nPartly\n\n\n--\n\n\n\n\n\n\nSplit seqs\n\n\nYes\n\n\nYes\n\n\n--\n\n\nPartly\n\n\n--\n\n\n--\n\n\n\n\n\n\nSplit by seq\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\n\n\n\n\nShuffle seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n\n\n\n\nSort seqs\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\n--\n\n\n\n\n\n\nLocate motifs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n\n\n\n\nCommon seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n\n\n\n\nClean bases\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\n\n\n\n\nTranscribe\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nTranslate\n\n\n--\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\n\n\n\n\nSize select\n\n\nIndirect\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n--\n\n\n\n\n\n\nRename head\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n\n\nInstallation\n\n\nfakit\n is implemented in \nGolang\n programming language,\n executable binary files \nfor most popular operating systems\n are freely available\n  in \nrelease\n page.\n\n\nJust \ndownload\n compressed\nexecutable file of your operating system, and uncompress it with \ntar -zxvf *.tar.gz\n command.\n\n\nYou can add the directory of the executable file to environment variable\n\nPATH\n, so you can run \nfakit\n anywhere.\n\n\n\n\n\n\nFor windows, the simplest way is copy it to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nFor Linux, type:\n\n\nchmod a+x /PATH/OF/FAKIT/fakit\necho export PATH=\\$PATH:/PATH/OF/fakit \n ~/.bashrc\n\n\n\nor simply copy it to \n/usr/local/bin\n\n\n\n\n\n\nFor Go developer, just one command:\n\n\ngo get -u github.com/shenwei356/fakit/fakit\n\n\n\nSubcommands\n\n\n19 in total.\n\n\nSequence and subsequence\n\n\n\n\nseq\n        transform sequences (revserse, complement, extract ID...)\n\n\nsubseq\n     get subsequences by region/gtf/bed, including flanking sequences\n\n\nsliding\n    sliding sequences, circular genome supported\n\n\nstat\n       simple statistics of FASTA files\n\n\nfaidx\n      create FASTA index file\n\n\n\n\nFormat conversion\n\n\n\n\nfx2tab\n     covert FASTA/Q to tabular format (and length/GC content/GC skew)\n\n\ntab2fx\n     covert tabular format to FASTA/Q format\n\n\nfq2fa\n      covert FASTQ to FASTA\n\n\n\n\nSearching\n\n\n\n\ngrep\n       search sequences by pattern(s) of name or sequence motifs\n\n\nlocate\n     locate subsequences/motifs\n\n\n\n\nSet operations\n\n\n\n\nrmdup\n      remove duplicated sequences by id/name/sequence\n\n\ncommon\n     find common sequences of multiple files by id/name/sequence\n\n\nsplit\n      split sequences into files by id/seq region/size/parts\n\n\nsample\n     sample sequences by number or proportion\n\n\nhead\n       print first N FASTA/Q records\n\n\n\n\nEdit\n\n\n\n\nreplace\n    replace name/sequence by regular expression\n\n\nrename\n     rename duplicated IDs\n\n\n\n\nOrdering\n\n\n\n\nshuffle\n    shuffle sequences\n\n\nsort\n       sort sequences by id/name/sequence\n\n\n\n\nMisc\n\n\n\n\nversion\n   print version information\n\n\n\n\nTechnical details and guides for use\n\n\nFASTA/Q format parsing\n\n\nfakit uses author's bioinformatics packages \nbio\n\nfor FASTA/Q parsing, which \nasynchronously parse FASTA/Q records and buffer them\nin chunks\n. The parser returns one chunk of records for each call.\n\n\nAsynchronous parsing saves much time because these's no waiting interval for\nparsed records being handled.\nThe strategy of records chunks reduces data exchange in parallelly handling\nof sequences, which could also improve performance.\n\n\nSince using of buffers and chunks, the memory occupation will be higher than\ncases of reading sequence one by one.\nThe default value of chunk size (configurable by global flag \n-c\n or \n--chunk-size\n)\nis 1, which is suitable for most of cases.\nBut for manipulating short sequences, e.g. FASTQ or FASTA of short sequences,\nyou could set higher value, e.g. 100.\nFor big genomes like human genome, smaller chunk size is prefered, e.g. 1.\nAnd the buffer size is configurable by global flag \n-b\n or \n--buffer-size\n\n(default value is 1). You may set with higher\nvalue for short sequences to imporve performance.\n\n\nSequence formats and types\n\n\nfakit seamlessly support FASTA and FASTQ format.\nAll subcommands except for \nfaidx\n can handle both formats.\nAnd only when some commands (\nsubseq\n, \nsplit\n, \nsort\n and \nshuffle\n)\nwhich utilise FASTA index to improve perfrmance for large files in two pass mode\n(by flag \n--two-pass\n), only FASTA format is supported.\n\n\nSequence format is automatically detected by the first character of the file\nor STDIN.\n\n\nSequence type (DNA/RNA/Protein) is automatically detected by leading subsequences\nof the first sequences in file or STDIN. The length of the leading subsequences\nis configurable by global flag \n--alphabet-guess-seq-length\n with default value\nof 10000. If length of the sequences is less than that, whole sequences will\nbe checked.\n\n\nSequence ID\n\n\nBy default, most softwares, including \nfakit\n, takes the first non-space\nletters as sequence ID. For example,\n\n\n\n\n\n\n\n\nFASTA head\n\n\nID\n\n\n\n\n\n\n\n\n\n\n123456 gene name\n\n\n123456\n\n\n\n\n\n\nlongname\n\n\nlongname\n\n\n\n\n\n\ngi\n110645304\nref\nNC_002516.2\n Pseudomona\n\n\ngi\n110645304\nref\nNC_002516.2\n\n\n\n\n\n\n\n\nBut for some sequences from NCBI,\ne.g. \ngi|110645304|ref|NC_002516.2| Pseudomona\n, the ID is \nNC_002516.2\n.\nIn this case, we could set sequence ID parsing regular expression by global flag\n\n--id-regexp \"\\|([^\\|]+)\\| \"\n or just use flag \n--id-ncbi\n. If you want\nthe \ngi\n number, then use \n--id-regexp \"^gi\\|([^\\|]+)\\|\"\n.\n\n\nFASTA index\n\n\nFor some commands, including \nsubseq\n, \nsplit\n, \nsort\n and \nshuffle\n,\nwhen input files are (plain or gzipped) FASTA files,\nFASTA index would be optional used for\nrapid access of sequences and reducing memory occupation.\n\n\nATTENTION: the \n.fakit.fai\n file created by fakit is a little different from .fai file\ncreated by samtools. fakit uses full sequence head instead of just ID as key.\n\n\nParallelization of CPU intensive jobs\n\n\nMost of the manipulations of FASTA/Q files are I/O intensive, to improve the\nperformance, asynchronous parsing strategy is used.\n\n\nThe validation of sequences bases and complement process of sequences\nare parallelized for large sequences.\n\n\nFor CPU intensive jobs like \ngrep\n with regular expressions and \nlocate\n with\nsequence motifs. The processes are parallelized\nwith \"Map-Reduce\" model by multiple goroutines in golang which are similar to but much\nlighter weight than threads. The concurrency number is configurable with global\nflag \n-j\n or \n--threads\n (default value: 1 for single-CPU PC, 2 for others).\n\n\nMemory occupation\n\n\nMost of the subcommands do not read whole FASTA/Q records in to memory,\nincluding \nstat\n, \nfq2fa\n, \nfx2tab\n, \ntab2fx\n, \ngrep\n, \nlocate\n, \nreplace\n,\n \nseq\n, \nsliding\n, \nsubseq\n. They just temporarily buffer chunks of records.\n\n\nHowever when handling big sequences, e.g. Human genome, the memory is high\n(2-3 GB) even the buffer size is 1.\nThis is due to the limitation of garbage collection mechanism in\n Go programming language, it may be solved in the future.\n\n\nNote that when using \nsubseq --gtf | --bed\n, if the GTF/BED files are too\nbig, the memory usage will increase.\nYou could use \n--chr\n to specify chromesomes and \n--feature\n to limit features.\n\n\nSome subcommands need to store sequences or heads in memory, but there are\nstrategy to reduce memory occupation, including \nrmdup\n and \ncommon\n.\nWhen comparing with sequences, MD5 digest could be used to replace sequence by\nflag \n-m\n (\n--md5\n).\n\n\nSome subcommands could either read all records or read the files twice by flag\n\n-2\n (\n--two-pass\n), including \nsample\n, \nsplit\n, \nshuffle\n and \nsort\n.\nThey use FASTA index for rapid acccess of sequences and reducing memory occupation.\n\n\nReproducibility\n\n\nSubcommands \nsample\n and \nshuffle\n use random function, random seed could be\ngiven by flag \n-s\n (\n--rand-seed\n). This makes sure that sampling result could be\nreproduced in different environments with same random seed.\n\n\nUsage \n Examples\n\n\nUsage and examples\n\n\nTutorial\n\n\nBenchmark\n\n\nMore details: \nhttp://shenwei356.github.io/fakit/benchmark/\n\n\nDatasets:\n\n\n$ fakit stat *.fa\nfile           seq_format   seq_type   num_seqs   min_len        avg_len       max_len\ndataset_A.fa   FASTA        DNA          67,748        56       41,442.5     5,976,145                  \ndataset_B.fa   FASTA        DNA             194       970   15,978,096.5   248,956,422\n\n\n\nfakit version: v0.2.5\n\n\n\n\nContact\n\n\nEmail me for any problem when using fakit. shenwei356(at)gmail.com\n\n\nCreate an issue\n to report bugs,\npropose new functions or ask for help.\n\n\nLicense\n\n\nMIT License", 
            "title": "Home"
        }, 
        {
            "location": "/#fakit-a-cross-platform-and-efficient-toolkit-for-fastaq-file-manipulation", 
            "text": "Documents  :  http://shenwei356.github.io/fakit  Source code:  https://github.com/shenwei356/fakit", 
            "title": "fakit - a cross-platform and efficient toolkit for FASTA/Q file manipulation"
        }, 
        {
            "location": "/#about-the-name", 
            "text": "Originally,  fakit  (abbreviation of  FASTA kit ) was designed to handle FASTA\nformat. And the name was remained after adding  seamless support for FASTA/Q fromat .", 
            "title": "About the name"
        }, 
        {
            "location": "/#introduction", 
            "text": "FASTA and FASTQ are basic formats for storing nucleotide and protein sequences.\nThe manipulations of FASTA/Q file include converting, clipping, searching,\nfiltering, deduplication, splitting, shuffling, sampling and so on.\nExisted tools only implemented parts of the functions,\nand some of them are only available for specific operating systems.\nFurthermore, the complicated installation process of dependencies packages and\nrunning environment also make them less friendly to common users.  fakit is a cross-platform, efficient, and practical FASTA/Q manipulations tool\nthat is friendly for researchers to complete wide ranges of FASTA file processing.\nThe toolkit supports plain or gzip-compressed input and output\nfrom either standard stream or files,\ntherefore, it could be easily used in command-line pipe.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#features", 
            "text": "Cross-platform  (Linux/Windows/Mac OS X/OpenBSD/FreeBSD,\n  see  download )  Light weight and out-of-the-box, no dependencies, no compilation, no configuration \n  (see  download )  Fast  (see  benchmark ),\n   multiple-CPUs supported .  Practical functions supported by 19 subcommands  (see subcommands and\n   usage  )  Well documented  (detailed  usage \n  and  benchmark  )  Seamlessly parses both FASTA and FASTQ formats  Support STDIN and gziped input/output file, easy being used in pipe  Support custom sequence ID regular expression  (especially useful for quering with ID list)  Reproducible results (configurable rand seed in  sample  and  shuffle )  Well organized source code, friendly to use and easy to extend.   Features comparison     Features  fakit  fasta_utilities  fastx_toolkit  pyfaidx  seqmagick  seqtk      Cross-platform  Yes  Partly  Partly  Yes  Yes  Yes    Mutli-line FASTA  Yes  Yes  --  Yes  Yes  Yes    Read FASTQ  Yes  Yes  Yes  --  Yes  Yes    Mutli-line FASTQ  Yes  Yes  --  --  Yes  Yes    Validate bases  Yes  --  Yes  Yes  --  --    Recognize RNA  Yes  Yes  --  --  Yes  Yes    Read STDIN  Yes  Yes  Yes  --  Yes  Yes    Read gzip  Yes  Yes  --  --  Yes  Yes    Write gzip  Yes  --  --  --  Yes  --    Search by motifs  Yes  Yes  --  --  Yes  --    Sample seqs  Yes  --  --  --  Yes  Yes    Subseq  Yes  Yes  --  Yes  Yes  Yes    Deduplicate seqs  Yes  --  --  --  Partly  --    Split seqs  Yes  Yes  --  Partly  --  --    Split by seq  Yes  --  Yes  Yes  --  --    Shuffle seqs  Yes  --  --  --  --  --    Sort seqs  Yes  Yes  --  --  Yes  --    Locate motifs  Yes  --  --  --  --  --    Common seqs  Yes  --  --  --  --  --    Clean bases  Yes  Yes  Yes  Yes  --  --    Transcribe  Yes  Yes  Yes  Yes  Yes  Yes    Translate  --  Yes  Yes  Yes  Yes  --    Size select  Indirect  Yes  --  Yes  Yes  --    Rename head  Yes  Yes  --  --  Yes  Yes", 
            "title": "Features"
        }, 
        {
            "location": "/#installation", 
            "text": "fakit  is implemented in  Golang  programming language,\n executable binary files  for most popular operating systems  are freely available\n  in  release  page.  Just  download  compressed\nexecutable file of your operating system, and uncompress it with  tar -zxvf *.tar.gz  command.  You can add the directory of the executable file to environment variable PATH , so you can run  fakit  anywhere.    For windows, the simplest way is copy it to  C:\\WINDOWS\\system32 .    For Linux, type:  chmod a+x /PATH/OF/FAKIT/fakit\necho export PATH=\\$PATH:/PATH/OF/fakit   ~/.bashrc  or simply copy it to  /usr/local/bin    For Go developer, just one command:  go get -u github.com/shenwei356/fakit/fakit", 
            "title": "Installation"
        }, 
        {
            "location": "/#subcommands", 
            "text": "19 in total.  Sequence and subsequence   seq         transform sequences (revserse, complement, extract ID...)  subseq      get subsequences by region/gtf/bed, including flanking sequences  sliding     sliding sequences, circular genome supported  stat        simple statistics of FASTA files  faidx       create FASTA index file   Format conversion   fx2tab      covert FASTA/Q to tabular format (and length/GC content/GC skew)  tab2fx      covert tabular format to FASTA/Q format  fq2fa       covert FASTQ to FASTA   Searching   grep        search sequences by pattern(s) of name or sequence motifs  locate      locate subsequences/motifs   Set operations   rmdup       remove duplicated sequences by id/name/sequence  common      find common sequences of multiple files by id/name/sequence  split       split sequences into files by id/seq region/size/parts  sample      sample sequences by number or proportion  head        print first N FASTA/Q records   Edit   replace     replace name/sequence by regular expression  rename      rename duplicated IDs   Ordering   shuffle     shuffle sequences  sort        sort sequences by id/name/sequence   Misc   version    print version information", 
            "title": "Subcommands"
        }, 
        {
            "location": "/#technical-details-and-guides-for-use", 
            "text": "", 
            "title": "Technical details and guides for use"
        }, 
        {
            "location": "/#fastaq-format-parsing", 
            "text": "fakit uses author's bioinformatics packages  bio \nfor FASTA/Q parsing, which  asynchronously parse FASTA/Q records and buffer them\nin chunks . The parser returns one chunk of records for each call.  Asynchronous parsing saves much time because these's no waiting interval for\nparsed records being handled.\nThe strategy of records chunks reduces data exchange in parallelly handling\nof sequences, which could also improve performance.  Since using of buffers and chunks, the memory occupation will be higher than\ncases of reading sequence one by one.\nThe default value of chunk size (configurable by global flag  -c  or  --chunk-size )\nis 1, which is suitable for most of cases.\nBut for manipulating short sequences, e.g. FASTQ or FASTA of short sequences,\nyou could set higher value, e.g. 100.\nFor big genomes like human genome, smaller chunk size is prefered, e.g. 1.\nAnd the buffer size is configurable by global flag  -b  or  --buffer-size \n(default value is 1). You may set with higher\nvalue for short sequences to imporve performance.", 
            "title": "FASTA/Q format parsing"
        }, 
        {
            "location": "/#sequence-formats-and-types", 
            "text": "fakit seamlessly support FASTA and FASTQ format.\nAll subcommands except for  faidx  can handle both formats.\nAnd only when some commands ( subseq ,  split ,  sort  and  shuffle )\nwhich utilise FASTA index to improve perfrmance for large files in two pass mode\n(by flag  --two-pass ), only FASTA format is supported.  Sequence format is automatically detected by the first character of the file\nor STDIN.  Sequence type (DNA/RNA/Protein) is automatically detected by leading subsequences\nof the first sequences in file or STDIN. The length of the leading subsequences\nis configurable by global flag  --alphabet-guess-seq-length  with default value\nof 10000. If length of the sequences is less than that, whole sequences will\nbe checked.", 
            "title": "Sequence formats and types"
        }, 
        {
            "location": "/#sequence-id", 
            "text": "By default, most softwares, including  fakit , takes the first non-space\nletters as sequence ID. For example,     FASTA head  ID      123456 gene name  123456    longname  longname    gi 110645304 ref NC_002516.2  Pseudomona  gi 110645304 ref NC_002516.2     But for some sequences from NCBI,\ne.g.  gi|110645304|ref|NC_002516.2| Pseudomona , the ID is  NC_002516.2 .\nIn this case, we could set sequence ID parsing regular expression by global flag --id-regexp \"\\|([^\\|]+)\\| \"  or just use flag  --id-ncbi . If you want\nthe  gi  number, then use  --id-regexp \"^gi\\|([^\\|]+)\\|\" .", 
            "title": "Sequence ID"
        }, 
        {
            "location": "/#fasta-index", 
            "text": "For some commands, including  subseq ,  split ,  sort  and  shuffle ,\nwhen input files are (plain or gzipped) FASTA files,\nFASTA index would be optional used for\nrapid access of sequences and reducing memory occupation.  ATTENTION: the  .fakit.fai  file created by fakit is a little different from .fai file\ncreated by samtools. fakit uses full sequence head instead of just ID as key.", 
            "title": "FASTA index"
        }, 
        {
            "location": "/#parallelization-of-cpu-intensive-jobs", 
            "text": "Most of the manipulations of FASTA/Q files are I/O intensive, to improve the\nperformance, asynchronous parsing strategy is used.  The validation of sequences bases and complement process of sequences\nare parallelized for large sequences.  For CPU intensive jobs like  grep  with regular expressions and  locate  with\nsequence motifs. The processes are parallelized\nwith \"Map-Reduce\" model by multiple goroutines in golang which are similar to but much\nlighter weight than threads. The concurrency number is configurable with global\nflag  -j  or  --threads  (default value: 1 for single-CPU PC, 2 for others).", 
            "title": "Parallelization of CPU intensive jobs"
        }, 
        {
            "location": "/#memory-occupation", 
            "text": "Most of the subcommands do not read whole FASTA/Q records in to memory,\nincluding  stat ,  fq2fa ,  fx2tab ,  tab2fx ,  grep ,  locate ,  replace ,\n  seq ,  sliding ,  subseq . They just temporarily buffer chunks of records.  However when handling big sequences, e.g. Human genome, the memory is high\n(2-3 GB) even the buffer size is 1.\nThis is due to the limitation of garbage collection mechanism in\n Go programming language, it may be solved in the future.  Note that when using  subseq --gtf | --bed , if the GTF/BED files are too\nbig, the memory usage will increase.\nYou could use  --chr  to specify chromesomes and  --feature  to limit features.  Some subcommands need to store sequences or heads in memory, but there are\nstrategy to reduce memory occupation, including  rmdup  and  common .\nWhen comparing with sequences, MD5 digest could be used to replace sequence by\nflag  -m  ( --md5 ).  Some subcommands could either read all records or read the files twice by flag -2  ( --two-pass ), including  sample ,  split ,  shuffle  and  sort .\nThey use FASTA index for rapid acccess of sequences and reducing memory occupation.", 
            "title": "Memory occupation"
        }, 
        {
            "location": "/#reproducibility", 
            "text": "Subcommands  sample  and  shuffle  use random function, random seed could be\ngiven by flag  -s  ( --rand-seed ). This makes sure that sampling result could be\nreproduced in different environments with same random seed.", 
            "title": "Reproducibility"
        }, 
        {
            "location": "/#usage-examples", 
            "text": "Usage and examples  Tutorial", 
            "title": "Usage &amp;&amp; Examples"
        }, 
        {
            "location": "/#benchmark", 
            "text": "More details:  http://shenwei356.github.io/fakit/benchmark/  Datasets:  $ fakit stat *.fa\nfile           seq_format   seq_type   num_seqs   min_len        avg_len       max_len\ndataset_A.fa   FASTA        DNA          67,748        56       41,442.5     5,976,145                  \ndataset_B.fa   FASTA        DNA             194       970   15,978,096.5   248,956,422  fakit version: v0.2.5", 
            "title": "Benchmark"
        }, 
        {
            "location": "/#contact", 
            "text": "Email me for any problem when using fakit. shenwei356(at)gmail.com  Create an issue  to report bugs,\npropose new functions or ask for help.", 
            "title": "Contact"
        }, 
        {
            "location": "/#license", 
            "text": "MIT License", 
            "title": "License"
        }, 
        {
            "location": "/download/", 
            "text": "Download\n\n\nfakit\n is implemented in \nGolang\n programming language,\n executable binary files \nfor most popular operating system\n are freely available\n  in \nrelease\n page.\n\n\nCurrent Version\n\n\n\n\nfakit v0.2.5\n\n\nfix a serious bug brought in \nv0.2.3\n, using unsafe method to convert \nstring\n to \n[]byte\n\n\nadd awk-like built-in variable of record number (\n{NR}\n) for \nfakit replace\n\n\n\n\n\n\n\n\nInstallation\n\n\nJust \ndownload\n compressed\nexecutable file of your operating system, and uncompress it with \ntar -zxvf *.tar.gz\n command.\n\n\nYou can add the directory of the executable file to environment variable\n\nPATH\n, so you can run \nfakit\n anywhere.\n\n\n\n\n\n\nFor windows, the simplest way is copy it to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nFor Linux, type:\n\n\nchmod a+x /PATH/OF/FAKIT/fakit\necho export PATH=\\$PATH:/PATH/OF/fakit \n ~/.bashrc\n\n\n\nor simply copy it to \n/usr/local/bin\n\n\n\n\n\n\nFor Go developer, just one command:\n\n\ngo get -u github.com/shenwei356/fakit/fakit\n\n\n\nPrevious Versions\n\n\n\n\nfakit v0.2.4.1\n\n\nfix several bugs from library \nbio\n, affected situations:\n\n\nLocating patterns in sequences by pattern FASTA file: \nfakit locate -f\n\n\nReading FASTQ file with record of which the quality starts with \n+\n\n\n\n\n\n\nadd command \nversion\n\n\n\n\n\n\nfakit v0.2.4\n\n\nadd subcommand \nhead\n\n\n\n\n\n\nfakit v0.2.3\n\n\nreduce memory occupation by avoid copy data when convert \nstring\n to \n[]byte\n\n\nspeedup reverse-complement by avoid repeatly calling functions\n\n\n\n\n\n\nfakit v0.2.2\n\n\nreduce memory occupation of subcommands that use FASTA index\n\n\n\n\n\n\nfakit v0.2.1\n\n\nimprove performance of outputing.\n\n\nfix bug of \nfakit seq -g\n for FASTA fromat\n\n\nsome other minor fix of code and docs\n\n\nupdate benchmark results\n\n\n\n\n\n\nfakit v0.2.0\n\n\nreduce memory usage of writing output\n\n\nfix bug of \nsubseq\n, \nshuffle\n, \nsort\n when reading from stdin\n\n\nreduce memory usage of \nfaidx\n\n\nmake validating sequences an optional option in \nseq\n command, it saves some time.\n\n\n\n\n\n\nfakit v0.1.9\n\n\nusing custom FASTA index file extension: \n.fakit.fai\n\n\nreducing memory usage of \nsample --number --two-pass\n\n\nchange default CPU number to 2 for multi-cpus computer, and 1 for single-CPU computer\n\n\n\n\n\n\nfakit v0.1.8\n\n\nadd subcommand \nrename\n to rename duplicated IDs\n\n\nadd subcommand \nfaidx\n to create FASTA index file\n\n\nutilize faidx to improve performance of \nsubseq\n\n\nshuffle\n, \nsort\n and split support two-pass mode (by flag \n-2\n) with faidx to reduce memory usage.\n\n\ndocument update\n\n\n\n\n\n\nfakit v0.1.7\n\n\nadd support for (multi-line) FASTQ format\n\n\nupdate document, add technical details\n\n\nrename subcommands \nfa2tab\n and \ntab2fa\n to \nfx2tab\n and \ntab2fx\n\n\nadd subcommand \nfq2fa\n\n\nadd column \"seq_format\" to \nstat\n\n\nadd global flag \n-b\n (\n--bufer-size\n)\n\n\nlittle change of flag in \nsubseq\n and some other commands\n\n\n\n\n\n\nfakit v0.1.6\n\n\nadd subcommand \nreplace\n\n\n\n\n\n\nfakit v0.1.5.2\n\n\nfix bug of \ngrep\n, when not using flag \n-r\n, flag \n-i\n will not take effect.\n\n\n\n\n\n\nfakit v0.1.5.1\n\n\nfix result of \nfakit sample -n\n\n\nfix benchmark script\n\n\n\n\n\n\nfakit v0.1.5\n\n\nadd global flag \n--id-ncbi\n\n\nadd flag \n-d\n (\n--dup-seqs-file\n) and \n-D\n (\n--dup-num-file\n) for subcommand \nrmdup\n\n\nmake using MD5 as an optional flag \n-m\n (\n--md5\n) in subcommand \nrmdup\n and \ncommon\n\n\nfix file name suffix of \nfakit split\n result\n\n\nminor modification of \nsliding\n output\n\n\n\n\n\n\nfakit v0.1.4.1\n\n\nchange alignment of \nstat\n output\n\n\npreciser CPUs number control\n\n\n\n\n\n\nfakit v0.1.4\n\n\nadd subcommand \nsort\n\n\nimprove subcommand \nsubseq\n: supporting of getting subsequences by GTF and BED files\n\n\nchange name format of \nsliding\n result\n\n\nprettier output of \nstat\n\n\n\n\n\n\nfakit v0.1.3.1\n\n\nPerformance improvement by reducing time of cleaning spaces\n\n\nDocument update\n\n\n\n\n\n\nfakit v0.1.3\n\n\nFurther performance improvement\n\n\nRename sub command \nextract\n to \ngrep\n\n\nChange default value of flag \n--threads\n back CPU number of current device,\n  change default value of flag \n--chunk-size\n back 10000 sequences.\n\n\nUpdate benchmark\n\n\n\n\n\n\nfakit v0.1.2\n\n\nAdd flag \n--dna2rna\n and \n--rna2dna\n to subcommand \nseq\n.\n\n\n\n\n\n\nfakit v0.1.1\n\n\n5.5X speedup of FASTA file parsing\n by avoid using regular expression to remove spaces (\ndetail\n ) and using slice indexing instead of map to validate letters (\ndetail\n)\n\n\nChange default value of global flag \n-- thread\n to 1. Since most of the subcommands are I/O intensive,  For computation intensive jobs, like extract and locate, you may set a bigger value.\n\n\nChange default value of global flag \n--chunk-size\n to 100.\n\n\nAdd subcommand \nstat\n\n\nFix bug of failing to automatically detect alphabet when only one record in file.\n\n\n\n\n\n\nfakit v0.1\n\n\nfirst release of fakit\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#download", 
            "text": "fakit  is implemented in  Golang  programming language,\n executable binary files  for most popular operating system  are freely available\n  in  release  page.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#current-version", 
            "text": "fakit v0.2.5  fix a serious bug brought in  v0.2.3 , using unsafe method to convert  string  to  []byte  add awk-like built-in variable of record number ( {NR} ) for  fakit replace", 
            "title": "Current Version"
        }, 
        {
            "location": "/download/#installation", 
            "text": "Just  download  compressed\nexecutable file of your operating system, and uncompress it with  tar -zxvf *.tar.gz  command.  You can add the directory of the executable file to environment variable PATH , so you can run  fakit  anywhere.    For windows, the simplest way is copy it to  C:\\WINDOWS\\system32 .    For Linux, type:  chmod a+x /PATH/OF/FAKIT/fakit\necho export PATH=\\$PATH:/PATH/OF/fakit   ~/.bashrc  or simply copy it to  /usr/local/bin    For Go developer, just one command:  go get -u github.com/shenwei356/fakit/fakit", 
            "title": "Installation"
        }, 
        {
            "location": "/download/#previous-versions", 
            "text": "fakit v0.2.4.1  fix several bugs from library  bio , affected situations:  Locating patterns in sequences by pattern FASTA file:  fakit locate -f  Reading FASTQ file with record of which the quality starts with  +    add command  version    fakit v0.2.4  add subcommand  head    fakit v0.2.3  reduce memory occupation by avoid copy data when convert  string  to  []byte  speedup reverse-complement by avoid repeatly calling functions    fakit v0.2.2  reduce memory occupation of subcommands that use FASTA index    fakit v0.2.1  improve performance of outputing.  fix bug of  fakit seq -g  for FASTA fromat  some other minor fix of code and docs  update benchmark results    fakit v0.2.0  reduce memory usage of writing output  fix bug of  subseq ,  shuffle ,  sort  when reading from stdin  reduce memory usage of  faidx  make validating sequences an optional option in  seq  command, it saves some time.    fakit v0.1.9  using custom FASTA index file extension:  .fakit.fai  reducing memory usage of  sample --number --two-pass  change default CPU number to 2 for multi-cpus computer, and 1 for single-CPU computer    fakit v0.1.8  add subcommand  rename  to rename duplicated IDs  add subcommand  faidx  to create FASTA index file  utilize faidx to improve performance of  subseq  shuffle ,  sort  and split support two-pass mode (by flag  -2 ) with faidx to reduce memory usage.  document update    fakit v0.1.7  add support for (multi-line) FASTQ format  update document, add technical details  rename subcommands  fa2tab  and  tab2fa  to  fx2tab  and  tab2fx  add subcommand  fq2fa  add column \"seq_format\" to  stat  add global flag  -b  ( --bufer-size )  little change of flag in  subseq  and some other commands    fakit v0.1.6  add subcommand  replace    fakit v0.1.5.2  fix bug of  grep , when not using flag  -r , flag  -i  will not take effect.    fakit v0.1.5.1  fix result of  fakit sample -n  fix benchmark script    fakit v0.1.5  add global flag  --id-ncbi  add flag  -d  ( --dup-seqs-file ) and  -D  ( --dup-num-file ) for subcommand  rmdup  make using MD5 as an optional flag  -m  ( --md5 ) in subcommand  rmdup  and  common  fix file name suffix of  fakit split  result  minor modification of  sliding  output    fakit v0.1.4.1  change alignment of  stat  output  preciser CPUs number control    fakit v0.1.4  add subcommand  sort  improve subcommand  subseq : supporting of getting subsequences by GTF and BED files  change name format of  sliding  result  prettier output of  stat    fakit v0.1.3.1  Performance improvement by reducing time of cleaning spaces  Document update    fakit v0.1.3  Further performance improvement  Rename sub command  extract  to  grep  Change default value of flag  --threads  back CPU number of current device,\n  change default value of flag  --chunk-size  back 10000 sequences.  Update benchmark    fakit v0.1.2  Add flag  --dna2rna  and  --rna2dna  to subcommand  seq .    fakit v0.1.1  5.5X speedup of FASTA file parsing  by avoid using regular expression to remove spaces ( detail  ) and using slice indexing instead of map to validate letters ( detail )  Change default value of global flag  -- thread  to 1. Since most of the subcommands are I/O intensive,  For computation intensive jobs, like extract and locate, you may set a bigger value.  Change default value of global flag  --chunk-size  to 100.  Add subcommand  stat  Fix bug of failing to automatically detect alphabet when only one record in file.    fakit v0.1  first release of fakit      \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Previous Versions"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage and Examples\n\n\nTechnical details and guides for use\n\n\nFASTA/Q format parsing\n\n\nfakit uses author's bioinformatics packages \nbio\n\nfor FASTA/Q parsing, which \nasynchronously parse FASTA/Q records and buffer them\nin chunks\n. The parser returns one chunk of records for each call.\n\n\nAsynchronous parsing saves much time because these's no waiting interval for\nparsed records being handled.\nThe strategy of records chunks reduces data exchange in parallelly handling\nof sequences, which could also improve performance.\n\n\nSince using of buffers and chunks, the memory occupation will be higher than\ncases of reading sequence one by one.\nThe default value of chunk size (configurable by global flag \n-c\n or \n--chunk-size\n)\nis 1, which is suitable for most of cases.\nBut for manipulating short sequences, e.g. FASTQ or FASTA of short sequences,\nyou could set higher value, e.g. 100.\nFor big genomes like human genome, smaller chunk size is prefered, e.g. 1.\nAnd the buffer size is configurable by global flag \n-b\n or \n--buffer-size\n\n(default value is 1). You may set with higher\nvalue for short sequences to imporve performance.\n\n\nSequence formats and types\n\n\nfakit seamlessly support FASTA and FASTQ format.\nAll subcommands except for \nfaidx\n can handle both formats.\nAnd only when some commands (\nsubseq\n, \nsplit\n, \nsort\n and \nshuffle\n)\nwhich utilise FASTA index to improve perfrmance for large files in two pass mode\n(by flag \n--two-pass\n), only FASTA format is supported.\n\n\nSequence format is automatically detected by the first character of the file\nor STDIN.\n\n\nSequence type (DNA/RNA/Protein) is automatically detected by leading subsequences\nof the first sequences in file or STDIN. The length of the leading subsequences\nis configurable by global flag \n--alphabet-guess-seq-length\n with default value\nof 10000. If length of the sequences is less than that, whole sequences will\nbe checked.\n\n\nSequence ID\n\n\nBy default, most softwares, including \nfakit\n, takes the first non-space\nletters as sequence ID. For example,\n\n\n\n\n\n\n\n\nFASTA head\n\n\nID\n\n\n\n\n\n\n\n\n\n\n123456 gene name\n\n\n123456\n\n\n\n\n\n\nlongname\n\n\nlongname\n\n\n\n\n\n\ngi\n110645304\nref\nNC_002516.2\n Pseudomona\n\n\ngi\n110645304\nref\nNC_002516.2\n\n\n\n\n\n\n\n\nBut for some sequences from NCBI,\ne.g. \ngi|110645304|ref|NC_002516.2| Pseudomona\n, the ID is \nNC_002516.2\n.\nIn this case, we could set sequence ID parsing regular expression by global flag\n\n--id-regexp \"\\|([^\\|]+)\\| \"\n or just use flag \n--id-ncbi\n. If you want\nthe \ngi\n number, then use \n--id-regexp \"^gi\\|([^\\|]+)\\|\"\n.\n\n\nFASTA index\n\n\nFor some commands, including \nsubseq\n, \nsplit\n, \nsort\n and \nshuffle\n,\nwhen input files are (plain or gzipped) FASTA files,\nFASTA index would be optional used for\nrapid acccess of sequences and reducing memory occupation.\n\n\nATTENTION: the \n.fakit.fai\n file created by fakit is a little different from .fai file\ncreated by samtools. fakit uses full sequence head instead of just ID as key.\n\n\nParallelization of CPU intensive jobs\n\n\nMost of the manipulations of FASTA/Q files are I/O intensive, to improve the\nperformance, asynchronous parsing strategy is used.\n\n\nThe validation of sequences bases and complement process of sequences\nare parallelized for large sequences.\n\n\nFor CPU intensive jobs like \ngrep\n with regular expressions and \nlocate\n with\nsequence motifs. The processes are parallelized\nwith \"Map-Reduce\" model by multiple goroutines in golang which are similar to but much\nlighter weight than threads. The concurrency number is configurable with global\nflag \n-j\n or \n--threads\n (default value: 1 for single-CPU PC, 2 for others).\n\n\nMemory occupation\n\n\nMost of the subcommands do not read whole FASTA/Q records in to memory,\nincluding \nstat\n, \nfq2fa\n, \nfx2tab\n, \ntab2fx\n, \ngrep\n, \nlocate\n, \nreplace\n,\n \nseq\n, \nsliding\n, \nsubseq\n. They just temporarily buffer chunks of records.\n\n\nHowever when handling big sequences, e.g. Human genome, the memory is high\n (2-3 GB) even the buffer size is 1.\n This is due to the limitation of garbage collection mechanism in\n  Go programming language, it may be solved in the future.\n\n\nNote that when using \nsubseq --gtf | --bed\n, if the GTF/BED files are too\nbig, the memory usage will increase.\nYou could use \n--chr\n to specify chromesomes and \n--feature\n to limit features.\n\n\nSome subcommands need to store sequences or heads in memory, but there are\nstrategy to reduce memory occupation, including \nrmdup\n and \ncommon\n.\nWhen comparing with sequences, MD5 digest could be used to replace sequence by\nflag \n-m\n (\n--md5\n).\n\n\nSome subcommands could either read all records or read the files twice by flag\n\n-2\n (\n--two-pass\n), including \nsample\n, \nsplit\n, \nshuffle\n and \nsort\n.\nThey use FASTA index for rapid acccess of sequences and reducing memory occupation.\n\n\nReproducibility\n\n\nSubcommands \nsample\n and \nshuffle\n use random function, random seed could be\ngiven by flag \n-s\n (\n--rand-seed\n). This makes sure that sampling result could be\nreproduced in different environments with same random seed.\n\n\nfakit\n\n\nUsage\n\n\nfakit -- a cross-platform and efficient suit for FASTA/Q file manipulation\n\nVersion: 0.2.5\n\nAuthor: Wei Shen \nshenwei356@gmail.com\n\n\nDocuments  : http://shenwei356.github.io/fakit\nSource code: https://github.com/shenwei356/fakit\n\nUsage:\n  fakit [command]\n\nAvailable Commands:\n  common      find common sequences of multiple files by id/name/sequence\n  faidx       create FASTA index file\n  fq2fa       covert FASTQ to FASTA\n  fx2tab      covert FASTA/Q to tabular format (with length/GC content/GC skew)\n  grep        search sequences by pattern(s) of name or sequence motifs\n  head        print first N FASTA/Q records\n  locate      locate subsequences/motifs\n  rename      rename duplicated IDs\n  replace     replace name/sequence/by regular expression\n  rmdup       remove duplicated sequences by id/name/sequence\n  sample      sample sequences by number or proportion\n  seq         transform sequences (revserse, complement, extract ID...)\n  shuffle     shuffle sequences\n  sliding     sliding sequences, circular genome supported\n  sort        sort sequences by id/name/sequence/length\n  split       split sequences into files by id/seq region/size/parts\n  stat        simple statistics of FASTA files\n  subseq      get subsequences by region/gtf/bed, including flanking sequences\n  tab2fx      covert tabular format to FASTA/Q format\n  version     print version information and check for update\n\nFlags:\n      --alphabet-guess-seq-length int   length of sequence prefix of the first FASTA record based on which fakit guesses the sequence type (0 for whole seq) (default 10000)\n  -b, --buffer-size int                 buffer size of chunks (0 for no buffer) (default 1)\n  -c, --chunk-size int                  chunk size (attention: unit is FASTA records not lines) (default 1)\n      --id-ncbi                         FASTA head is NCBI-style, e.g. \ngi|110645304|ref|NC_002516.2| Pseud...\n      --id-regexp string                regular expression for parsing ID (default \n^([^\\\\s]+)\\\\s?\n)\n  -w, --line-width int                  line width when outputing FASTA format (0 for no wrap) (default 60)\n  -o, --out-file string                 out file (\n-\n for stdout, suffix .gz for gzipped out) (default \n-\n)\n      --quiet                           be quiet and do not show extra information\n  -t, --seq-type string                 sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default \nauto\n)\n  -j, --threads int                     number of CPUs. (default value: 1 for single-CPU PC, 2 for others) (default 2)\n\nUse \nfakit [command] --help\n for more information about a command.\n\n\n\n\n\nDatasets\n\n\nDatasets from \nThe miRBase Sequence Database -- Release 21\n\n\n\n\nhairpin.fa.gz\n\n\nmature.fa.gz\n\n\nmiRNA.diff.gz\n\n\n\n\nHuman genome from \nensembl\n\n(For \nfakit subseq\n)\n\n\n\n\nHomo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz\n\n\nHomo_sapiens.GRCh38.84.gtf.gz\n\n\nHomo_sapiens.GRCh38.84.bed.gz\n is converted from \nHomo_sapiens.GRCh38.84.gtf.gz\n\nby \ngtf2bed\n\nwith command\nzcat Homo_sapiens.GRCh38.84.gtf.gz | gtf2bed --do-not-sort | gzip -c \n Homo_sapiens.GRCh38.84.bed.gz\n\n\n\n\n\n\n\nOnly DNA and gtf/bed data of Chr1 were used:\n\n\n\n\n\n\nchr1.fa.gz\n\n\n    fakit grep -p 1 Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz -o chr1.fa.gz\n\n\n\n\n\n\n\nchr1.gtf.gz\n\n\n    zcat Homo_sapiens.GRCh38.84.gtf.gz | grep -w '^1' | gzip -c \n chr1.gtf.gz\n\n\n\n\n\n\n\nchr1.bed.gz\n\n\n    zcat Homo_sapiens.GRCh38.84.bed.gz | grep -w '^1' | gzip -c \n chr1.bed.gz\n\n\n\n\n\n\n\nseq\n\n\nUsage\n\n\ntransform sequences (revserse, complement, extract ID...)\n\nUsage:\n  fakit seq [flags]\n\nFlags:\n  -p, --complement                complement sequence (blank for Protein sequence)\n      --dna2rna                   DNA to RNA\n  -G, --gap-letter string         gap letters (default \n- \n)\n  -l, --lower-case                print sequences in lower case\n  -n, --name                      only print names\n  -i, --only-id                   print ID instead of full head\n  -q, --qual                      only print qualities\n  -g, --remove-gaps               remove gaps\n  -r, --reverse                   reverse sequence)\n      --rna2dna                   RNA to DNA\n  -s, --seq                       only print sequences\n  -u, --upper-case                print sequences in upper case\n  -v, --validate-seq              validate bases according to the alphabet\n  -V, --validate-seq-length int   length of sequence to validate (0 for whole seq) (default 10000)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nRead and print\n\n\n\n\n\n\nFrom file:\n\n\n$ fakit seq hairpin.fa.gz\n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAAC\nUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\n\n$ fakit seq read_1.fq.gz\n@HWI-D00523:240:HF3WGBCXX:1:1101:2574:2226 1:N:0:CTGTAG\nTGAGGAATATTGGTCAATGGGCGCGAGCCTGAACCAGCCAAGTAGCGTGAAGGATGACTG\nCCCTACGGGTTGTAAACTTCTTTTATAAAGGAATAAAGTGAGGCACGTGTGCCTTTTTGT\nATGTACTTTATGAATAAGGATCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGA\nTCCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGCAGGCGGT\n+\nHIHIIIIIHIIHGHHIHHIIIIIIIIIIIIIIIHHIIIIIHHIHIIIIIGIHIIIIHHHH\nHHGHIHIIIIIIIIIIIGHIIIIIGHIIIIHIIHIHHIIIIHIHHIIIIIIIGIIIIIII\nHIIIIIGHIIIIHIIIH?DGHEEGHIIIIIIIIIIIHIIHIIIHHIIHIHHIHCHHIIHG\nIHHHHHHH\nGG?B@EHDE-BEHHHII5B@GHHF?CGEHHHDHIHIIH\n\n\n\n\n\n\n\nFrom stdin:\n\n\nzcat hairpin.fa.gz | fakit seq\n\n\n\n\n\n\n\n\n\n\n\nSequence types\n\n\n\n\n\n\nBy default, \nfakit seq\n automatically detect the sequence type\n\n\n$ echo -e \"\nseq\\nacgtryswkmbdhvACGTRYSWKMBDHV\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTA        DNA               1        28        28        28\n\n$ echo -e \"\nseq\\nACGUN ACGUN\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTA        RNA               1        11        11        11\n\n$ echo -e \"\nseq\\nabcdefghijklmnpqrstvwyz\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTA        Protein           1        23        23        23\n\n$ echo -e \"@read\\nACTGCN\\n+\\n@IICCG\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTQ        DNA               1         6         6         6\n\n\n\n\n\n\n\nYou can also set sequence type by flag \n-t\n (\n--seq-type\n).\n  But this only take effect on subcommands \nseq\n and \nlocate\n.\n\n\n$ echo -e \"\nseq\\nabcdefghijklmnpqrstvwyz\" | fakit seq -t dna\n[INFO] when flag -t (--seq-type) given, flag -v (--validate-seq) is automatically switched on\n[ERRO] error when parsing seq: seq (invalid DNAredundant letter: e)\n\n\n\n\n\n\n\n\n\n\n\nOnly print names\n\n\n\n\n\n\nFull name:\n\n\n$ fakit seq hairpin.fa.gz -n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop\n\n\n\n\n\n\n\nOnly ID:\n\n\n$ fakit seq hairpin.fa.gz -n -i\ncel-let-7\ncel-lin-4\ncel-mir-1\n\n\n\n\n\n\n\nCustom ID region by regular expression (this could be applied to all subcommands):\n\n\n$ fakit seq hairpin.fa.gz -n -i --id-regexp \"^[^\\s]+\\s([^\\s]+)\\s\"\nMI0000001\nMI0000002\nMI0000003\n\n\n\n\n\n\n\n\n\n\n\nOnly print seq (global flag \n-w\n defines the output line width, 0 for no wrap)\n\n\n$ fakit seq hairpin.fa.gz -s -w 0\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\nAUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU\nAAAGUGACCGUACCGAGCUGCAUACUUCCUUACAUGCCCAUACUAUAUCAUAAAUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAGU\n\n\n\n\n\n\n\nConvert multi-line FASTQ to 4-line FASTQ\n\n\n$ fakit seq reads_1.fq.gz -w 0\n\n\n\n\n\n\n\nReverse comlement sequence\n\n\n$ fakit seq hairpin.fa.gz -r -p\n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUCGAAGAGUUCUGUCUCCGGUAAGGUAGAAAAUUGCAUAGUUCACCGGUGGUAAUAUUCC\nAAACUAUACAACCUACUACCUCACCGGAUCCACAGUGUA\n\n\n\n\n\n\n\nRemove gaps and to lower/upper case\n\n\n$ echo -e \"\nseq\\nACGT-ACTGC-ACC\" | fakit seq -g -u\n\nseq\nACGTACTGCACC\n\n\n\n\n\n\n\nRNA to DNA\n\n\n$ echo -e \"\nseq\\nUCAUAUGCUUGUCUCAAAGAUUA\" | fakit seq --rna2dna\n\nseq\nTCATATGCTTGTCTCAAAGATTA\n\n\n\n\n\n\n\nsubseq\n\n\nUsage\n\n\nget subsequences by region/gtf/bed, including flanking sequences.\n\nRecommendation: use plain FASTA file, so fakit could utilize FASTA index.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4      C G T\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit subseq [flags]\n\nFlags:\n      --bed string        by BED file\n      --chr value         select limited sequence with sequence IDs (multiple value supported, case ignored) (default [])\n  -d, --down-stream int   down stream length\n      --feature value     select limited feature types (multiple value supported, case ignored, only works with GTF) (default [])\n      --gtf string        by GTF (version 2.2) file\n  -f, --only-flank        only return up/down stream sequence\n  -r, --region string     by region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases, 13:-1 for cutting first 12 bases. type \nfakit subseq -h\n for more examples\n  -u, --up-stream int     up stream length\n\n\n\n\n\nExamples\n\n\nRecommendation: use plain FASTA file, so fakit could utilize FASTA index.\n\n\n\n\n\n\nFirst 12 bases\n\n\n$ zcat hairpin.fa.gz | fakit subseq -r 1:12\n\n\n\n\n\n\n\nLast 12 bases\n\n\n$ zcat hairpin.fa.gz | fakit subseq -r -12:-1\n\n\n\n\n\n\n\nSubsequences without first and last 12 bases\n\n\n$ zcat hairpin.fa.gz | fakit subseq -r 13:-13\n\n\n\n\n\n\n\nGet subsequence by GTF file\n\n\n$ cat t.fa\n\nseq\nactgACTGactgn\n$ cat t.gtf\nseq     test    CDS     5       8       .       .       .       gene_id \"A\"; transcript_id \"\";\nseq     test    CDS     5       8       .       -       .       gene_id \"B\"; transcript_id \"\";\n$ fakit\n\n$ fakit subseq --gtf t.gtf t.fa\n\nseq_5:8:. A\nACTG\n\nseq_5:8:- B\nCAGT\n\n\n\nHuman genome example:\n\n\nAVOID loading all data from Homo_sapiens.GRCh38.84.gtf.gz,\nthe uncompressed data are so big and may exhaust your RAM.\n\n\nWe could specify chromesomes and features.\n\n\n$ fakit subseq --gtf Homo_sapiens.GRCh38.84.gtf.gz --chr 1 --feature cds  hsa.fa \n chr1.gtf.cds.fa\n\n$ fakit stat chr1.gtf.cds.fa\nfile              seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nchr1.gtf.cds.fa   FASTA        DNA          65,012         1     151.4    12,045\n\n\n\n\n\n\n\nGet CDS and 3bp up-stream sequences\n\n\n$ fakit subseq --gtf t.gtf t.fa -u 3\n\nseq_5:8:._us:3 A\nctgACTG\n\nseq_5:8:-_us:3 B\nagtCAGT\n\n\n\n\n\n\n\nGet 3bp up-stream sequences of CDS, not including CDS\n\n\n$ fakit subseq --gtf t.gtf t.fa -u 3 -f\n\nseq_5:8:._usf:3 A\nctg\n\nseq_5:8:-_usf:3 B\nagt\n\n\n\n\n\n\n\nGet subsequences by BED file.\n\n\nAVOID loading all data from Homo_sapiens.GRCh38.84.gtf.gz,\nthe uncompressed data are so big and may exhaust your RAM.\n\n\n$  fakit subseq --bed Homo_sapiens.GRCh38.84.bed.gz --chr 1 hsa.fa \n  chr1.bed.gz.fa\n\n\n\nWe may need to remove duplicated sequences\n\n\n$ fakit subseq --bed Homo_sapiens.GRCh38.84.bed.gz --chr 1 hsa.fa | fakit rmdup \n chr1.bed.rmdup.fa\n[INFO] 141060 duplicated records removed\n\n\n\nSummary:\n\n\n$ fakit stat chr1.gz.*.gz\nfile               seq_format   seq_type   num_seqs   min_len   avg_len     max_len\nchr1.gz.fa         FASTA        DNA         231,974         1   3,089.5   1,551,957\nchr1.gz.rmdup.fa   FASTA        DNA          90,914         1   6,455.8   1,551,957\n\n\n\n\n\n\n\nsliding\n\n\nUsage\n\n\nsliding sequences, circular genome supported\n\nUsage:\n  fakit sliding [flags]\n\nFlags:\n  -C, --circular-genome   circular genome\n  -s, --step int        step size\n  -W, --window int      window size\n\n\n\n\n\nExamples\n\n\n\n\n\n\nGeneral use\n\n\n$ echo -e \"\nseq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6\n\nseq_sliding:1-6\nACGTac\n\nseq_sliding:4-9\nTacgtN\n\n\n\n\n\n\n\nCircular genome\n\n\n$ echo -e \"\nseq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6 -C\n\nseq_sliding:1-6\nACGTac\n\nseq_sliding:4-9\nTacgtN\n\nseq_sliding:7-2\ngtNNAC\n\nseq_sliding:10-5\nNACGTa\n\n\n\n\n\n\n\nGenerate GC content for ploting\n\n\n$ zcat hairpin.fa.gz | fakit fx2tab | head -n 1 | fakit tab2fx | fakit sliding -s 5 -W 30 | fakit fx2tab -n -g\ncel-let-7_sliding:1-30          50.00\ncel-let-7_sliding:6-35          46.67\ncel-let-7_sliding:11-40         43.33\ncel-let-7_sliding:16-45         36.67\ncel-let-7_sliding:21-50         33.33\ncel-let-7_sliding:26-55         40.00\n...\n\n\n\n\n\n\n\nstat\n\n\nUsage\n\n\nsimple statistics of FASTA files\n\nUsage:\n  fakit stat [flags]\n\n\n\n\n\nEexamples\n\n\n\n\nGeneral use\n$ fakit stat *.f{a,q}.gz\nfile            seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nclean.fa.gz     FASTA        RNA          26,419        39     104.2     2,354\nhairpin.fa.gz   FASTA        RNA          28,645        39       103     2,354\nmature.fa.gz    FASTA        RNA          35,828        15      21.8        34\nreads_1.fq.gz   FASTQ        DNA           2,500       226       227       229\nreads_2.fq.gz   FASTQ        DNA           2,500       223       224       225\n\n\n\n\n\n\n\nfq2fa\n\n\nUsage\n\n\ncovert FASTQ to FASTA\n\nUsage:\n  fakit fq2fa [flags]\n\n\n\n\n\nExamples\n\n\nfakit fq2fa reads_1.fq.gz -o reads1_.fa.gz\n\n\n\nfx2tab \n tab2fx\n\n\nUsage (fx2tab)\n\n\ncovert FASTA/Q to tabular format, and provide various information,\nlike sequence length, GC content/GC skew.\n\nUsage:\n  fakit fx2tab [flags]\n\nFlags:\n  -B, --base-content value   print base content. (case ignored, multiple values supported) e.g. -b AT -b N (default [])\n  -g, --gc                   print GC content\n  -G, --gc-skew              print GC-Skew\n  -H, --header-line          print header line\n  -l, --length               print sequence length\n  -n, --name                 only print names (no sequences and qualities)\n  -i, --only-id              print ID instead of full head\n\n\n\n\n\nUsage (tab2fx)\n\n\ncovert tabular format (first two/three columns) to FASTA/Q format\n\nUsage:\n  fakit tab2fx [flags]\n\nFlags:\n  -p, --comment-line-prefix value   comment line prefix (default [#,//])\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nDefault output\n\n\n$ fakit fx2tab hairpin.fa.gz | head -n 2\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop      UACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU\n\n\n\n\n\n\n\nPrint sequence length, GC content, and only print names (no sequences),\nwe could also print title line by flag \n-T\n.\n\n\n$ fakit fx2tab hairpin.fa.gz -l -g -n -i -H | head -n 4 | csvtk -t -C '\n' pretty\n#name       seq   qual   length   GC\ncel-let-7                99       43.43\ncel-lin-4                94       54.26\ncel-mir-1                96       40.62\n\n\n\n\n\n\n\nUse fx2tab and tab2fx in pipe\n\n\n$ zcat hairpin.fa.gz | fakit fx2tab | fakit tab2fx\n\n$ zcat reads_1.fq.gz | fakit fx2tab | fakit tab2fx\n\n\n\n\n\n\n\nSort sequences by length (use \nfakit sort -l\n)\n\n\n$ zcat hairpin.fa.gz | fakit fx2tab -l | sort -t\"`echo -e '\\t'`\" -n -k4,4 | fakit tab2fx\n\ncin-mir-4129 MI0015684 Ciona intestinalis miR-4129 stem-loop\nUUCGUUAUUGGAAGACCUUAGUCCGUUAAUAAAGGCAUC\n\nmmu-mir-7228 MI0023723 Mus musculus miR-7228 stem-loop\nUGGCGACCUGAACAGAUGUCGCAGUGUUCGGUCUCCAGU\n\ncin-mir-4103 MI0015657 Ciona intestinalis miR-4103 stem-loop\nACCACGGGUCUGUGACGUAGCAGCGCUGCGGGUCCGCUGU\n\n$ fakit sort -l hairpin.fa.gz\n\n\n\nSorting or filtering by GC (or other base by -flag \n-B\n) content could also achieved in similar way.\n\n\n\n\n\n\nGet first 1000 sequences\n\n\n$ fakit fx2tab hairpin.fa.gz | head -n 1000 | fakit tab2fx\n\n$ fakit fx2tab reads_1.fq.gz | head -n 1000 | fakit tab2fx\n\n\n\n\n\n\n\nExtension\n\n\nAfter converting FASTA to tabular format with \nfakit fx2tab\n,\nit could be handled with CSV/TSV tools,\n e.g. \ncsvtk\n, a cross-platform, efficient and practical CSV/TSV toolkit\n\n\n\n\ncsvtk grep\n could be used to filter sequences (similar with \nfakit grep\n)\n\n\ncsvtk inter\n\ncomputates intersection of multiple files. It could achieve similar function\nas \nfakit common -n\n along with shell.\n\n\ncsvtk join\n joins multiple CSV/TSV files by multiple IDs.\n\n\ncsv_melt\n\nprovides melt function, could be used in preparation of data for ploting.\n\n\n\n\ngrep\n\n\nUsage\n\n\nsearch sequences by pattern(s) of name or sequence motifs\n\nUsage:\n  fakit grep [flags]\n\nFlags:\n  -n, --by-name               match by full name instead of just id\n  -s, --by-seq                match by seq\n  -d, --degenerate            pattern/motif contains degenerate base\n      --delete-matched        delete matched pattern to speedup\n  -i, --ignore-case           ignore case\n  -v, --invert-match          invert the sense of matching, to select non-matching records\n  -p, --pattern value         search pattern (multiple values supported) (default [])\n  -f, --pattern-file string   pattern file\n  -r, --use-regexp            patterns are regular expression\n\n\n\n\n\nExamples\n\n\n\n\n\n\nExtract human hairpins (i.e. sequences with name starting with \nhsa\n)\n\n\n$ zcat hairpin.fa.gz | fakit grep -r -p ^hsa\n\nhsa-let-7a-1 MI0000060 Homo sapiens let-7a-1 stem-loop\nUGGGAUGAGGUAGUAGGUUGUAUAGUUUUAGGGUCACACCCACCACUGGGAGAUAACUAU\nACAAUCUACUGUCUUUCCUA\n\nhsa-let-7a-2 MI0000061 Homo sapiens let-7a-2 stem-loop\nAGGUUGAGGUAGUAGGUUGUAUAGUUUAGAAUUACAUCAAGGGAGAUAACUGUACAGCCU\nCCUAGCUUUCCU\n\n\n\n\n\n\n\nRemove human and mice hairpins.\n\n\n$ zcat hairpin.fa.gz | fakit grep -r -p ^hsa -p ^mmu -v\n\n\n\n\n\n\n\nExtract new entries by information from miRNA.diff.gz\n\n\n\n\n\n\nGet IDs of new entries.\n\n\n$ zcat miRNA.diff.gz | grep ^# -v | grep NEW | cut -f 2 \n list\n$ more list\ncfa-mir-486\ncfa-mir-339-1\npmi-let-7\n\n\n\n\n\n\n\nExtract by ID list file\n\n\n$ zcat hairpin.fa.gz | fakit grep -f list \n new.fa\n\n\n\n\n\n\n\n\n\n\n\nExtract sequences starting with AGGCG\n\n\n$ zcat hairpin.fa.gz | fakit grep -s -r -i -p ^aggcg\n\n\n\n\n\n\n\nExtract sequences with TTSAA (AgsI digest site) in SEQUENCE. Base S stands for C or G.\n\n\n$ zcat hairpin.fa.gz | fakit grep -s -d -i -p TTSAA\n\n\n\nIt's equal to but simpler than:\n\n\n$ zcat hairpin.fa.gz | fakit grep -s -r -i -p TT[CG]AA\n\n\n\n\n\n\n\nlocate\n\n\nUsage\n\n\nlocate subsequences/motifs\n\nMotifs could be EITHER plain sequence containing \nACTGN\n OR regular\nexpression like \nA[TU]G(?:.{3})+?[TU](?:AG|AA|GA)\n for ORFs.\nDegenerate bases like \nRYMM..\n are also supported by flag -d.\n\nBy default, motifs are treated as regular expression.\nWhen flag -d given, regular expression may be wrong.\nFor example: \n\\w\n will be wrongly converted to \n\\[AT]\n.\n\nUsage:\n  fakit locate [flags]\n\nFlags:\n  -d, --degenerate                pattern/motif contains degenerate base\n  -i, --ignore-case               ignore case\n  -P, --only-positive-strand      only search at positive strand\n  -p, --pattern value             search pattern/motif (multiple values supported) (default [])\n  -f, --pattern-file string       pattern/motif file (FASTA format)\n  -V, --validate-seq-length int   length of sequence to validate (0 for whole seq) (default 10000)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nLocate ORFs.\n\n\n$ zcat hairpin.fa.gz | fakit locate -i -p \"A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)\"\nseqID   patternName     pattern strand  start   end     matched\ncel-lin-4       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        +  136      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGA\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        +  54       95      AUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAG\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        -  43       51      AUGAUAUAG\n\n\n\n\n\n\n\nLocate Motif.\n\n\n$ zcat hairpin.fa.gz | fakit locate -i -p UUS\nseqID   patternName     pattern strand  start   end     matched\nbna-MIR396a     UUS     UUS     -       105     107     UUS\nbna-MIR396a     UUS     UUS     -       89      91      UUS\n\n\n\nNotice that \nfakit grep\n only searches in positive strand, but \nfakit loate\n could recognize both strand\n\n\n\n\n\n\nrmdup\n\n\nUsage\n\n\nremove duplicated sequences by id/name/sequence\n\nUsage:\n  fakit rmdup [flags]\n\nFlags:\n    -n, --by-name                by full name instead of just id\n    -s, --by-seq                 by seq\n    -D, --dup-num-file string    file to save number and list of duplicated seqs\n    -d, --dup-seqs-file string   file to save duplicated seqs\n    -i, --ignore-case            ignore case\n    -m, --md5                    use MD5 instead of original seqs to reduce memory usage when comparing by seqs\n\n\n\n\n\nExamples\n\n\nSimilar to \ncommon\n.\n\n\n\n\n\n\nGeneral use\n\n\n$ zcat hairpin.fa.gz | fakit rmdup -s -o clean.fa.gz\n[INFO] 2226 duplicated records removed\n\n$ zcat reads_1.fq.gz | fakit rmdup -s -o clean.fa.gz\n[INFO] 1086 duplicated records removed\n\n\n\n\n\n\n\nSave duplicated sequences to file\n\n\n$ zcat hairpin.fa.gz | fakit rmdup -s -i -m -o clean.fa.gz -d duplicated.fa.gz -D duplicated.detail.txt\n\n$ cat duplicated.detail.txt   # here is not the entire list\n3   hsa-mir-424, mml-mir-424, ppy-mir-424\n3   hsa-mir-342, mml-mir-342, ppy-mir-342\n2   ngi-mir-932, nlo-mir-932\n2   ssc-mir-9784-1, ssc-mir-9784-2\n\n\n\n\n\n\n\ncommon\n\n\nUsage\n\n\nfind common sequences of multiple files by id/name/sequence\n\nUsage:\n  fakit common [flags]\n\nFlags:\n    -n, --by-name       match by full name instead of just id\n    -s, --by-seq        match by sequence\n    -i, --ignore-case   ignore case\n    -m, --md5           use MD5 instead of original seqs to reduce memory usage when comparing by seqs\n\n\n\n\n\nExamples\n\n\n\n\n\n\nBy ID (default)\n\n\nfakit common file*.fa -o common.fasta\n\n\n\n\n\n\n\nBy full name\n\n\nfakit common file*.fa -n -o common.fasta\n\n\n\n\n\n\n\nBy sequence\n\n\nfakit common file*.fa -s -i -o common.fasta\n\n\n\n\n\n\n\nBy sequence (\nfor large sequences\n)\n\n\nfakit common file*.fa -s -i -o common.fasta --md5\n\n\n\n\n\n\n\nsplit\n\n\nUsage\n\n\nsplit sequences into files by name ID, subsequence of given region,\npart size or number of parts.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4      C G T\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit split [flags]\n\nFlags:\n  -i, --by-id              split squences according to sequence ID\n  -p, --by-part int        split squences into N parts\n  -r, --by-region string   split squences according to subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases. type \nfakit split -h\n for more examples\n  -s, --by-size int        split squences into multi parts with N sequences\n  -d, --dry-run            dry run, just print message and no files will be created.\n  -k, --keep-temp          keep tempory FASTA and .fai file when using 2-pass mode\n  -m, --md5                use MD5 instead of region sequence in output file when using flag -r (--by-region)\n  -2, --two-pass           two-pass mode read files twice to lower memory usage. (only for FASTA format)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nSplit sequences into parts with at most 10000 sequences\n\n\n$ fakit split hairpin.fa.gz -s 10000\n[INFO] split into 10000 seqs per file\n[INFO] write 10000 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 10000 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 8645 sequences to file: hairpin.fa.part_003.gz\n\n\n\n\n\n\n\nSplit sequences into 4 parts\n\n\n$ fakit split hairpin.fa.gz -p 4\n[INFO] split into 4 parts\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 7162 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_003.gz\n[INFO] write 7159 sequences to file: hairpin.fa.part_004.gz\n\n\n\nTo reduce memory usage when spliting big file, we should alwasy use flag \n--two-pass\n\n\n$ fakit split hairpin.fa.gz -p 4 -2\n[INFO] split into 4 parts\n[INFO] read and write sequences to tempory file: hairpin.fa.gz.fa ...\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 28645 sequences loaded\n[INFO] write 7162 sequences to file: hairpin.part_001.fa.gz\n[INFO] write 7162 sequences to file: hairpin.part_002.fa.gz\n[INFO] write 7162 sequences to file: hairpin.part_003.fa.gz\n[INFO] write 7159 sequences to file: hairpin.part_004.fa.gz\n\n\n\n\n\n\n\nSplit sequences by species. i.e. by custom IDs (first three letters)\n\n\n$ fakit split hairpin.fa.gz -i --id-regexp \"^([\\w]+)\\-\" -2\n[INFO] split by ID. idRegexp: ^([\\w]+)\\-\n[INFO] read and write sequences to tempory file: hairpin.fa.gz.fa ...\n[INFO] create and read FASTA index ...\n[INFO] create FASTA index for hairpin.fa.gz.fa\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 28645 sequences loaded\n[INFO] write 48 sequences to file: hairpin.id_cca.fa.gz\n[INFO] write 3 sequences to file: hairpin.id_hci.fa.gz\n[INFO] write 106 sequences to file: hairpin.id_str.fa.gz\n[INFO] write 1 sequences to file: hairpin.id_bkv.fa.gz\n...\n\n\n\n\n\n\n\nSplit sequences by sequence region (for example, sequence barcode)\n\n\n$ fakit split hairpin.fa.gz -r 1:3 -2\n[INFO] split by region: 1:3\n[INFO] read and write sequences to tempory file: hairpin.fa.gz.fa ...\n[INFO] read sequence IDs and sequence region from FASTA file ...\n[INFO] create and read FASTA index ...\n[INFO] write 463 sequences to file: hairpin.region_1:3_AUG.fa.gz\n[INFO] write 349 sequences to file: hairpin.region_1:3_ACU.fa.gz\n[INFO] write 311 sequences to file: hairpin.region_1:3_CGG.fa.gz\n\n\n\nIf region is too long, we could use falg \n--md5\n,\ni.e. use MD5 instead of region sequence in output file.\n\n\nSequence suffix could be defined as \n-r -12:-1\n\n\n\n\n\n\nsample\n\n\nUsage\n\n\nsample sequences by number or proportion.\n\nUsage:\n  fakit sample [flags]\n\nFlags:\n  -n, --number int         sample by number (result may not exactly match)\n  -p, --proportion float   sample by proportion\n  -s, --rand-seed int      rand seed for shuffle (default 11)\n  -2, --two-pass           2-pass mode read files twice to lower memory usage. Not allowed when reading from stdin\n\n\n\n\n\nExamples\n\n\n\n\n\n\nSample by proportion\n\n\n$ zcat hairpin.fa.gz | fakit sample -p 0.1 -o sample.fa.gz\n[INFO] sample by proportion\n[INFO] 2814 sequences outputed\n\n\n\n\n\n\n\nSample by number\n\n\n$ zcat hairpin.fa.gz | fakit sample -n 1000 -o sample.fa.gz\n[INFO] sample by number\n[INFO] 949 sequences outputed\n\n\n\nTo reduce memory usage when spliting big file, we could use flag \n--two-pass\n\n\nWe can also use \nfakit sample -p\n followed with \nfakit head -n\n:\n\n\n$ zcat hairpin.fa.gz | fakit sample -p 0.1 | fakit head -n 1000 -o sample.fa.gz\n\n\n\n\n\n\n\nSet rand seed to reproduce the result\n\n\n$ zcat hairpin.fa.gz | fakit sample -p 0.1 -s 11\n\n\n\n\n\n\n\nMost of the time, we could shuffle after sampling\n\n\n$ zcat hairpin.fa.gz | fakit sample -p 0.1 | fakit shuffle -o sample.fa.gz\n\n\n\n\n\n\n\nNote that when sampling on FASTQ files, make sure using same random seed by\nflag \n-s\n (\n--rand-seed\n)\n\n\nhead\n\n\nUsage\n\n\nprint first N FASTA/Q records\n\nUsage:\n  fakit head [flags]\n\nFlags:\n  -n, --number int   print first N FASTA/Q records (default 10)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nFASTA\n\n\n$ fakit head -n 1 hairpin.fa.gz\n\n\n\n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAAC\nUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\n\n\n\n\n\n\n\n\nFASTQ\n\n\n$ fakit head -n 1 reads_1.fq.gz\n@HWI-D00523:240:HF3WGBCXX:1:1101:2574:2226 1:N:0:CTGTAG\nTGAGGAATATTGGTCAATGGGCGCGAGCCTGAACCAGCCAAGTAGCGTGAAGGATGACTG\nCCCTACGGGTTGTAAACTTCTTTTATAAAGGAATAAAGTGAGGCACGTGTGCCTTTTTGT\nATGTACTTTATGAATAAGGATCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGA\nTCCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGCAGGCGGT\n+\nHIHIIIIIHIIHGHHIHHIIIIIIIIIIIIIIIHHIIIIIHHIHIIIIIGIHIIIIHHHH\nHHGHIHIIIIIIIIIIIGHIIIIIGHIIIIHIIHIHHIIIIHIHHIIIIIIIGIIIIIII\nHIIIIIGHIIIIHIIIH?DGHEEGHIIIIIIIIIIIHIIHIIIHHIIHIHHIHCHHIIHG\nIHHHHHHH\nGG?B@EHDE-BEHHHII5B@GHHF?CGEHHHDHIHIIH\n\n\n\n\n\n\nreplace\n\n\nUsage\n\n\nreplace name/sequence/by regular expression.\n\nNote that the replacement supports capture variables.\ne.g. $1 represents the text of the first submatch.\nATTENTION: use SINGLE quote NOT double quotes in *nix OS.\n\nExamples: Adding space to all bases.\n\n    fakit replace -p \n(.)\n -r '$1 ' -s\n\nOr use the \\ escape character.\n\n    fakit replace -p \n(.)\n -r \n\\$1 \n -s\n\nmore on: http://shenwei356.github.io/fakit/usage/#replace\n\nUsage:\n  fakit replace [flags]\n\nFlags:\n  -s, --by-seq               replace seq\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character. record number is also supported by \n{NR}\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nRemove descriptions\n\n\n$ echo -e \"\nseq1 abc-123\\nACGT-ACGT\" | fakit replace -p \" .+\"\n\nseq1\nACGT-ACGT\n\n\n\n\n\n\n\nReplace \"-\" with \"=\"\n\n\n$ echo -e \"\nseq1 abc-123\\nACGT-ACGT\" | fakit replace -p \"\\-\" -r '='\n\nseq1 abc=123\nACGT-ACGT\n\n\n\n\n\n\n\nRemove gaps in sequences.\n\n\n$ echo -e \"\nseq1 abc-123\\nACGT-ACGT\" | fakit replace -p \" |-\" -s\n\nseq1 abc-123\nACGTACGT\n\n\n\n\n\n\n\nAdd space to every base. \nATTENTION: use SINGLE quote NOT double quotes in *nix OS\n\n\n$ echo -e \"\nseq1 abc-123\\nACGT-ACGT\" | fakit replace -p \"(.)\" -r '$1 ' -s\n\nseq1 abc-123\nA C G T - A C G T\n\n\n\n\n\n\n\nTranspose sequence with \ncsvtk\n\n\n$ echo -e \"\nseq1\\nACTGACGT\\n\nseq2\\nactgccgt\" | fakit replace -p \"(.)\" -r     \"\\$1 \" -s | fakit seq -s -u | csvtk space2tab | csvtk -t transpose\nA       A\nC       C\nT       T\nG       G\nA       C\nC       C\nG       G\nT       T\n\n\n\n\n\n\n\nRename with number of record\n\n\necho -e \"\nabc\\nACTG\\n\n123\\nATTT\" |  fakit replace -p .+ -r \"seq_{NR}\" \n\nseq_1\nACTG\n\nseq_2\nATTT\n\n\n\n\n\n\n\nshuffle\n\n\nUsage\n\n\nshuffle sequences.\n\nBy default, all records will be readed into memory.\nFor FASTA format, use flag -2 (--two-pass) to reduce memory usage. FASTQ not\nsupported.\n\nFirstly, fakit reads the sequence IDs. If the file is not plain FASTA file,\nfakit will write the sequences to tempory files, and create FASTA index.\n\nSecondly, fakit shuffles sequence IDs and extract sequences by FASTA index.\n\nATTENTION: the .fai file created by fakit is a little different from .fai file\ncreated by samtools. Fakit use full sequence head instead of just ID as key.\nSo please delete .fai file created by samtools.\n\nUsage:\n  fakit shuffle [flags]\n\nFlags:\n  -k, --keep-temp       keep tempory FASTA and .fai file when using 2-pass mode\n  -s, --rand-seed int   rand seed for shuffle (default 23)\n  -2, --two-pass        two-pass mode read files twice to lower memory usage. (only for FASTA format)\n\n\n\n\n\nExamples\n\n\n\n\n\n\nGeneral use.\n\n\n$ fakit shuffle hairpin.fa.gz \n shuffled.fa\n[INFO] read sequences ...\n[INFO] 28645 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...\n\n\n\n\n\n\n\nFor big genome, you'd better use two-pass mode\n so fakit could use\n   FASTA index to reduce memory usage\n\n\n$ time fakit shuffle -2 hsa.fa \n shuffle.fa\n[INFO] create and read FASTA index ...\n[INFO] create FASTA index for hsa.fa\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...\n\nreal    0m35.080s\nuser    0m45.521s\nsys     0m3.411s\n\n\n\n\n\n\n\nNote that when sampling on FASTQ files, make sure using same random seed by\nflag \n-s\n (\n--rand-seed\n) for read 1 and 2 files.\n\n\nsort\n\n\nUsage\n\n\nsort sequences by id/name/sequence/length.\n\nBy default, all records will be readed into memory.\nFor FASTA format, use flag -2 (--two-pass) to reduce memory usage. FASTQ not\nsupported.\n\nFirstly, fakit reads the sequence head and length information.\nIf the file is not plain FASTA file,\nfakit will write the sequences to tempory files, and create FASTA index.\n\nSecondly, fakit sort sequence by head and length information\nand extract sequences by FASTA index.\n\nATTENTION: the .fai file created by fakit is a little different from .fai file\ncreated by samtools. Fakit use full sequence head instead of just ID as key.\nSo please delete .fai file created by samtools.\n\nUsage:\n  fakit sort [flags]\n\nFlags:\n  -l, --by-length               by sequence length\n  -n, --by-name                 by full name instead of just id\n  -s, --by-seq                  by sequence\n  -i, --ignore-case             ignore case\n  -k, --keep-temp               keep tempory FASTA and .fai file when using 2-pass mode\n  -r, --reverse                 reverse the result\n  -L, --seq-prefix-length int   length of sequence prefix on which fakit sorts by sequences (0 for whole sequence) (default 10000)\n  -2, --two-pass                two-pass mode read files twice to lower memory usage. (only for FASTA format)\n\n\n\n\n\nExamples\n\n\nFor FASTA format, use flag -2 (--two-pass) to reduce memory usage\n\n\n\n\n\n\nsort by ID\n\n\n$ echo -e \"\nseq1\\nACGTNcccc\\n\nSEQ2\\nacgtnAAAA\" | fakit sort --quiet\n\nSEQ2\nacgtnAAAA\n\nseq1\nACGTNcccc\n\n\n\n\n\n\n\nsort by ID, ignoring case.\n\n\n$ echo -e \"\nseq1\\nACGTNcccc\\n\nSEQ2\\nacgtnAAAA\" | fakit sort --quiet -i\n\nseq1\nACGTNcccc\n\nSEQ2\nacgtnAAAA\n\n\n\n\n\n\n\nsort by seq, ignoring case.\n\n\n$ echo -e \"\nseq1\\nACGTNcccc\\n\nSEQ2\\nacgtnAAAA\" | fakit sort --quiet -s -i\n\nSEQ2\nacgtnAAAA\n\nseq1\nACGTNcccc\n\n\n\n\n\n\n\nsort by sequence length\n\n\n$ echo -e \"\nseq1\\nACGTNcccc\\n\nSEQ2\\nacgtnAAAAnnn\\n\nseq3\\nacgt\" | fakit sort --quiet -l\n\nseq3\nacgt\n\nseq1\nACGTNcccc\n\nSEQ2\nacgtnAAAAnnn\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage-and-examples", 
            "text": "", 
            "title": "Usage and Examples"
        }, 
        {
            "location": "/usage/#technical-details-and-guides-for-use", 
            "text": "", 
            "title": "Technical details and guides for use"
        }, 
        {
            "location": "/usage/#fastaq-format-parsing", 
            "text": "fakit uses author's bioinformatics packages  bio \nfor FASTA/Q parsing, which  asynchronously parse FASTA/Q records and buffer them\nin chunks . The parser returns one chunk of records for each call.  Asynchronous parsing saves much time because these's no waiting interval for\nparsed records being handled.\nThe strategy of records chunks reduces data exchange in parallelly handling\nof sequences, which could also improve performance.  Since using of buffers and chunks, the memory occupation will be higher than\ncases of reading sequence one by one.\nThe default value of chunk size (configurable by global flag  -c  or  --chunk-size )\nis 1, which is suitable for most of cases.\nBut for manipulating short sequences, e.g. FASTQ or FASTA of short sequences,\nyou could set higher value, e.g. 100.\nFor big genomes like human genome, smaller chunk size is prefered, e.g. 1.\nAnd the buffer size is configurable by global flag  -b  or  --buffer-size \n(default value is 1). You may set with higher\nvalue for short sequences to imporve performance.", 
            "title": "FASTA/Q format parsing"
        }, 
        {
            "location": "/usage/#sequence-formats-and-types", 
            "text": "fakit seamlessly support FASTA and FASTQ format.\nAll subcommands except for  faidx  can handle both formats.\nAnd only when some commands ( subseq ,  split ,  sort  and  shuffle )\nwhich utilise FASTA index to improve perfrmance for large files in two pass mode\n(by flag  --two-pass ), only FASTA format is supported.  Sequence format is automatically detected by the first character of the file\nor STDIN.  Sequence type (DNA/RNA/Protein) is automatically detected by leading subsequences\nof the first sequences in file or STDIN. The length of the leading subsequences\nis configurable by global flag  --alphabet-guess-seq-length  with default value\nof 10000. If length of the sequences is less than that, whole sequences will\nbe checked.", 
            "title": "Sequence formats and types"
        }, 
        {
            "location": "/usage/#sequence-id", 
            "text": "By default, most softwares, including  fakit , takes the first non-space\nletters as sequence ID. For example,     FASTA head  ID      123456 gene name  123456    longname  longname    gi 110645304 ref NC_002516.2  Pseudomona  gi 110645304 ref NC_002516.2     But for some sequences from NCBI,\ne.g.  gi|110645304|ref|NC_002516.2| Pseudomona , the ID is  NC_002516.2 .\nIn this case, we could set sequence ID parsing regular expression by global flag --id-regexp \"\\|([^\\|]+)\\| \"  or just use flag  --id-ncbi . If you want\nthe  gi  number, then use  --id-regexp \"^gi\\|([^\\|]+)\\|\" .", 
            "title": "Sequence ID"
        }, 
        {
            "location": "/usage/#fasta-index", 
            "text": "For some commands, including  subseq ,  split ,  sort  and  shuffle ,\nwhen input files are (plain or gzipped) FASTA files,\nFASTA index would be optional used for\nrapid acccess of sequences and reducing memory occupation.  ATTENTION: the  .fakit.fai  file created by fakit is a little different from .fai file\ncreated by samtools. fakit uses full sequence head instead of just ID as key.", 
            "title": "FASTA index"
        }, 
        {
            "location": "/usage/#parallelization-of-cpu-intensive-jobs", 
            "text": "Most of the manipulations of FASTA/Q files are I/O intensive, to improve the\nperformance, asynchronous parsing strategy is used.  The validation of sequences bases and complement process of sequences\nare parallelized for large sequences.  For CPU intensive jobs like  grep  with regular expressions and  locate  with\nsequence motifs. The processes are parallelized\nwith \"Map-Reduce\" model by multiple goroutines in golang which are similar to but much\nlighter weight than threads. The concurrency number is configurable with global\nflag  -j  or  --threads  (default value: 1 for single-CPU PC, 2 for others).", 
            "title": "Parallelization of CPU intensive jobs"
        }, 
        {
            "location": "/usage/#memory-occupation", 
            "text": "Most of the subcommands do not read whole FASTA/Q records in to memory,\nincluding  stat ,  fq2fa ,  fx2tab ,  tab2fx ,  grep ,  locate ,  replace ,\n  seq ,  sliding ,  subseq . They just temporarily buffer chunks of records.  However when handling big sequences, e.g. Human genome, the memory is high\n (2-3 GB) even the buffer size is 1.\n This is due to the limitation of garbage collection mechanism in\n  Go programming language, it may be solved in the future.  Note that when using  subseq --gtf | --bed , if the GTF/BED files are too\nbig, the memory usage will increase.\nYou could use  --chr  to specify chromesomes and  --feature  to limit features.  Some subcommands need to store sequences or heads in memory, but there are\nstrategy to reduce memory occupation, including  rmdup  and  common .\nWhen comparing with sequences, MD5 digest could be used to replace sequence by\nflag  -m  ( --md5 ).  Some subcommands could either read all records or read the files twice by flag -2  ( --two-pass ), including  sample ,  split ,  shuffle  and  sort .\nThey use FASTA index for rapid acccess of sequences and reducing memory occupation.", 
            "title": "Memory occupation"
        }, 
        {
            "location": "/usage/#reproducibility", 
            "text": "Subcommands  sample  and  shuffle  use random function, random seed could be\ngiven by flag  -s  ( --rand-seed ). This makes sure that sampling result could be\nreproduced in different environments with same random seed.", 
            "title": "Reproducibility"
        }, 
        {
            "location": "/usage/#fakit", 
            "text": "Usage  fakit -- a cross-platform and efficient suit for FASTA/Q file manipulation\n\nVersion: 0.2.5\n\nAuthor: Wei Shen  shenwei356@gmail.com \n\nDocuments  : http://shenwei356.github.io/fakit\nSource code: https://github.com/shenwei356/fakit\n\nUsage:\n  fakit [command]\n\nAvailable Commands:\n  common      find common sequences of multiple files by id/name/sequence\n  faidx       create FASTA index file\n  fq2fa       covert FASTQ to FASTA\n  fx2tab      covert FASTA/Q to tabular format (with length/GC content/GC skew)\n  grep        search sequences by pattern(s) of name or sequence motifs\n  head        print first N FASTA/Q records\n  locate      locate subsequences/motifs\n  rename      rename duplicated IDs\n  replace     replace name/sequence/by regular expression\n  rmdup       remove duplicated sequences by id/name/sequence\n  sample      sample sequences by number or proportion\n  seq         transform sequences (revserse, complement, extract ID...)\n  shuffle     shuffle sequences\n  sliding     sliding sequences, circular genome supported\n  sort        sort sequences by id/name/sequence/length\n  split       split sequences into files by id/seq region/size/parts\n  stat        simple statistics of FASTA files\n  subseq      get subsequences by region/gtf/bed, including flanking sequences\n  tab2fx      covert tabular format to FASTA/Q format\n  version     print version information and check for update\n\nFlags:\n      --alphabet-guess-seq-length int   length of sequence prefix of the first FASTA record based on which fakit guesses the sequence type (0 for whole seq) (default 10000)\n  -b, --buffer-size int                 buffer size of chunks (0 for no buffer) (default 1)\n  -c, --chunk-size int                  chunk size (attention: unit is FASTA records not lines) (default 1)\n      --id-ncbi                         FASTA head is NCBI-style, e.g.  gi|110645304|ref|NC_002516.2| Pseud...\n      --id-regexp string                regular expression for parsing ID (default  ^([^\\\\s]+)\\\\s? )\n  -w, --line-width int                  line width when outputing FASTA format (0 for no wrap) (default 60)\n  -o, --out-file string                 out file ( -  for stdout, suffix .gz for gzipped out) (default  - )\n      --quiet                           be quiet and do not show extra information\n  -t, --seq-type string                 sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default  auto )\n  -j, --threads int                     number of CPUs. (default value: 1 for single-CPU PC, 2 for others) (default 2)\n\nUse  fakit [command] --help  for more information about a command.", 
            "title": "fakit"
        }, 
        {
            "location": "/usage/#datasets", 
            "text": "Datasets from  The miRBase Sequence Database -- Release 21   hairpin.fa.gz  mature.fa.gz  miRNA.diff.gz   Human genome from  ensembl \n(For  fakit subseq )   Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz  Homo_sapiens.GRCh38.84.gtf.gz  Homo_sapiens.GRCh38.84.bed.gz  is converted from  Homo_sapiens.GRCh38.84.gtf.gz \nby  gtf2bed \nwith command zcat Homo_sapiens.GRCh38.84.gtf.gz | gtf2bed --do-not-sort | gzip -c   Homo_sapiens.GRCh38.84.bed.gz    Only DNA and gtf/bed data of Chr1 were used:    chr1.fa.gz      fakit grep -p 1 Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz -o chr1.fa.gz    chr1.gtf.gz      zcat Homo_sapiens.GRCh38.84.gtf.gz | grep -w '^1' | gzip -c   chr1.gtf.gz    chr1.bed.gz      zcat Homo_sapiens.GRCh38.84.bed.gz | grep -w '^1' | gzip -c   chr1.bed.gz", 
            "title": "Datasets"
        }, 
        {
            "location": "/usage/#seq", 
            "text": "Usage  transform sequences (revserse, complement, extract ID...)\n\nUsage:\n  fakit seq [flags]\n\nFlags:\n  -p, --complement                complement sequence (blank for Protein sequence)\n      --dna2rna                   DNA to RNA\n  -G, --gap-letter string         gap letters (default  -  )\n  -l, --lower-case                print sequences in lower case\n  -n, --name                      only print names\n  -i, --only-id                   print ID instead of full head\n  -q, --qual                      only print qualities\n  -g, --remove-gaps               remove gaps\n  -r, --reverse                   reverse sequence)\n      --rna2dna                   RNA to DNA\n  -s, --seq                       only print sequences\n  -u, --upper-case                print sequences in upper case\n  -v, --validate-seq              validate bases according to the alphabet\n  -V, --validate-seq-length int   length of sequence to validate (0 for whole seq) (default 10000)  Examples    Read and print    From file:  $ fakit seq hairpin.fa.gz cel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAAC\nUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\n\n$ fakit seq read_1.fq.gz\n@HWI-D00523:240:HF3WGBCXX:1:1101:2574:2226 1:N:0:CTGTAG\nTGAGGAATATTGGTCAATGGGCGCGAGCCTGAACCAGCCAAGTAGCGTGAAGGATGACTG\nCCCTACGGGTTGTAAACTTCTTTTATAAAGGAATAAAGTGAGGCACGTGTGCCTTTTTGT\nATGTACTTTATGAATAAGGATCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGA\nTCCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGCAGGCGGT\n+\nHIHIIIIIHIIHGHHIHHIIIIIIIIIIIIIIIHHIIIIIHHIHIIIIIGIHIIIIHHHH\nHHGHIHIIIIIIIIIIIGHIIIIIGHIIIIHIIHIHHIIIIHIHHIIIIIIIGIIIIIII\nHIIIIIGHIIIIHIIIH?DGHEEGHIIIIIIIIIIIHIIHIIIHHIIHIHHIHCHHIIHG\nIHHHHHHH GG?B@EHDE-BEHHHII5B@GHHF?CGEHHHDHIHIIH    From stdin:  zcat hairpin.fa.gz | fakit seq      Sequence types    By default,  fakit seq  automatically detect the sequence type  $ echo -e \" seq\\nacgtryswkmbdhvACGTRYSWKMBDHV\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTA        DNA               1        28        28        28\n\n$ echo -e \" seq\\nACGUN ACGUN\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTA        RNA               1        11        11        11\n\n$ echo -e \" seq\\nabcdefghijklmnpqrstvwyz\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTA        Protein           1        23        23        23\n\n$ echo -e \"@read\\nACTGCN\\n+\\n@IICCG\" | fakit stat\nfile   seq_format   seq_type   num_seqs   min_len   avg_len   max_len\n-      FASTQ        DNA               1         6         6         6    You can also set sequence type by flag  -t  ( --seq-type ).\n  But this only take effect on subcommands  seq  and  locate .  $ echo -e \" seq\\nabcdefghijklmnpqrstvwyz\" | fakit seq -t dna\n[INFO] when flag -t (--seq-type) given, flag -v (--validate-seq) is automatically switched on\n[ERRO] error when parsing seq: seq (invalid DNAredundant letter: e)      Only print names    Full name:  $ fakit seq hairpin.fa.gz -n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop    Only ID:  $ fakit seq hairpin.fa.gz -n -i\ncel-let-7\ncel-lin-4\ncel-mir-1    Custom ID region by regular expression (this could be applied to all subcommands):  $ fakit seq hairpin.fa.gz -n -i --id-regexp \"^[^\\s]+\\s([^\\s]+)\\s\"\nMI0000001\nMI0000002\nMI0000003      Only print seq (global flag  -w  defines the output line width, 0 for no wrap)  $ fakit seq hairpin.fa.gz -s -w 0\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\nAUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU\nAAAGUGACCGUACCGAGCUGCAUACUUCCUUACAUGCCCAUACUAUAUCAUAAAUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAGU    Convert multi-line FASTQ to 4-line FASTQ  $ fakit seq reads_1.fq.gz -w 0    Reverse comlement sequence  $ fakit seq hairpin.fa.gz -r -p cel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUCGAAGAGUUCUGUCUCCGGUAAGGUAGAAAAUUGCAUAGUUCACCGGUGGUAAUAUUCC\nAAACUAUACAACCUACUACCUCACCGGAUCCACAGUGUA    Remove gaps and to lower/upper case  $ echo -e \" seq\\nACGT-ACTGC-ACC\" | fakit seq -g -u seq\nACGTACTGCACC    RNA to DNA  $ echo -e \" seq\\nUCAUAUGCUUGUCUCAAAGAUUA\" | fakit seq --rna2dna seq\nTCATATGCTTGTCTCAAAGATTA", 
            "title": "seq"
        }, 
        {
            "location": "/usage/#subseq", 
            "text": "Usage  get subsequences by region/gtf/bed, including flanking sequences.\n\nRecommendation: use plain FASTA file, so fakit could utilize FASTA index.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4      C G T\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit subseq [flags]\n\nFlags:\n      --bed string        by BED file\n      --chr value         select limited sequence with sequence IDs (multiple value supported, case ignored) (default [])\n  -d, --down-stream int   down stream length\n      --feature value     select limited feature types (multiple value supported, case ignored, only works with GTF) (default [])\n      --gtf string        by GTF (version 2.2) file\n  -f, --only-flank        only return up/down stream sequence\n  -r, --region string     by region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases, 13:-1 for cutting first 12 bases. type  fakit subseq -h  for more examples\n  -u, --up-stream int     up stream length  Examples  Recommendation: use plain FASTA file, so fakit could utilize FASTA index.    First 12 bases  $ zcat hairpin.fa.gz | fakit subseq -r 1:12    Last 12 bases  $ zcat hairpin.fa.gz | fakit subseq -r -12:-1    Subsequences without first and last 12 bases  $ zcat hairpin.fa.gz | fakit subseq -r 13:-13    Get subsequence by GTF file  $ cat t.fa seq\nactgACTGactgn\n$ cat t.gtf\nseq     test    CDS     5       8       .       .       .       gene_id \"A\"; transcript_id \"\";\nseq     test    CDS     5       8       .       -       .       gene_id \"B\"; transcript_id \"\";\n$ fakit\n\n$ fakit subseq --gtf t.gtf t.fa seq_5:8:. A\nACTG seq_5:8:- B\nCAGT  Human genome example:  AVOID loading all data from Homo_sapiens.GRCh38.84.gtf.gz,\nthe uncompressed data are so big and may exhaust your RAM.  We could specify chromesomes and features.  $ fakit subseq --gtf Homo_sapiens.GRCh38.84.gtf.gz --chr 1 --feature cds  hsa.fa   chr1.gtf.cds.fa\n\n$ fakit stat chr1.gtf.cds.fa\nfile              seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nchr1.gtf.cds.fa   FASTA        DNA          65,012         1     151.4    12,045    Get CDS and 3bp up-stream sequences  $ fakit subseq --gtf t.gtf t.fa -u 3 seq_5:8:._us:3 A\nctgACTG seq_5:8:-_us:3 B\nagtCAGT    Get 3bp up-stream sequences of CDS, not including CDS  $ fakit subseq --gtf t.gtf t.fa -u 3 -f seq_5:8:._usf:3 A\nctg seq_5:8:-_usf:3 B\nagt    Get subsequences by BED file.  AVOID loading all data from Homo_sapiens.GRCh38.84.gtf.gz,\nthe uncompressed data are so big and may exhaust your RAM.  $  fakit subseq --bed Homo_sapiens.GRCh38.84.bed.gz --chr 1 hsa.fa    chr1.bed.gz.fa  We may need to remove duplicated sequences  $ fakit subseq --bed Homo_sapiens.GRCh38.84.bed.gz --chr 1 hsa.fa | fakit rmdup   chr1.bed.rmdup.fa\n[INFO] 141060 duplicated records removed  Summary:  $ fakit stat chr1.gz.*.gz\nfile               seq_format   seq_type   num_seqs   min_len   avg_len     max_len\nchr1.gz.fa         FASTA        DNA         231,974         1   3,089.5   1,551,957\nchr1.gz.rmdup.fa   FASTA        DNA          90,914         1   6,455.8   1,551,957", 
            "title": "subseq"
        }, 
        {
            "location": "/usage/#sliding", 
            "text": "Usage  sliding sequences, circular genome supported\n\nUsage:\n  fakit sliding [flags]\n\nFlags:\n  -C, --circular-genome   circular genome\n  -s, --step int        step size\n  -W, --window int      window size  Examples    General use  $ echo -e \" seq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6 seq_sliding:1-6\nACGTac seq_sliding:4-9\nTacgtN    Circular genome  $ echo -e \" seq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6 -C seq_sliding:1-6\nACGTac seq_sliding:4-9\nTacgtN seq_sliding:7-2\ngtNNAC seq_sliding:10-5\nNACGTa    Generate GC content for ploting  $ zcat hairpin.fa.gz | fakit fx2tab | head -n 1 | fakit tab2fx | fakit sliding -s 5 -W 30 | fakit fx2tab -n -g\ncel-let-7_sliding:1-30          50.00\ncel-let-7_sliding:6-35          46.67\ncel-let-7_sliding:11-40         43.33\ncel-let-7_sliding:16-45         36.67\ncel-let-7_sliding:21-50         33.33\ncel-let-7_sliding:26-55         40.00\n...", 
            "title": "sliding"
        }, 
        {
            "location": "/usage/#stat", 
            "text": "Usage  simple statistics of FASTA files\n\nUsage:\n  fakit stat [flags]  Eexamples   General use $ fakit stat *.f{a,q}.gz\nfile            seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nclean.fa.gz     FASTA        RNA          26,419        39     104.2     2,354\nhairpin.fa.gz   FASTA        RNA          28,645        39       103     2,354\nmature.fa.gz    FASTA        RNA          35,828        15      21.8        34\nreads_1.fq.gz   FASTQ        DNA           2,500       226       227       229\nreads_2.fq.gz   FASTQ        DNA           2,500       223       224       225", 
            "title": "stat"
        }, 
        {
            "location": "/usage/#fq2fa", 
            "text": "Usage  covert FASTQ to FASTA\n\nUsage:\n  fakit fq2fa [flags]  Examples  fakit fq2fa reads_1.fq.gz -o reads1_.fa.gz", 
            "title": "fq2fa"
        }, 
        {
            "location": "/usage/#fx2tab-tab2fx", 
            "text": "Usage (fx2tab)  covert FASTA/Q to tabular format, and provide various information,\nlike sequence length, GC content/GC skew.\n\nUsage:\n  fakit fx2tab [flags]\n\nFlags:\n  -B, --base-content value   print base content. (case ignored, multiple values supported) e.g. -b AT -b N (default [])\n  -g, --gc                   print GC content\n  -G, --gc-skew              print GC-Skew\n  -H, --header-line          print header line\n  -l, --length               print sequence length\n  -n, --name                 only print names (no sequences and qualities)\n  -i, --only-id              print ID instead of full head  Usage (tab2fx)  covert tabular format (first two/three columns) to FASTA/Q format\n\nUsage:\n  fakit tab2fx [flags]\n\nFlags:\n  -p, --comment-line-prefix value   comment line prefix (default [#,//])  Examples    Default output  $ fakit fx2tab hairpin.fa.gz | head -n 2\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop      UACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU    Print sequence length, GC content, and only print names (no sequences),\nwe could also print title line by flag  -T .  $ fakit fx2tab hairpin.fa.gz -l -g -n -i -H | head -n 4 | csvtk -t -C ' ' pretty\n#name       seq   qual   length   GC\ncel-let-7                99       43.43\ncel-lin-4                94       54.26\ncel-mir-1                96       40.62    Use fx2tab and tab2fx in pipe  $ zcat hairpin.fa.gz | fakit fx2tab | fakit tab2fx\n\n$ zcat reads_1.fq.gz | fakit fx2tab | fakit tab2fx    Sort sequences by length (use  fakit sort -l )  $ zcat hairpin.fa.gz | fakit fx2tab -l | sort -t\"`echo -e '\\t'`\" -n -k4,4 | fakit tab2fx cin-mir-4129 MI0015684 Ciona intestinalis miR-4129 stem-loop\nUUCGUUAUUGGAAGACCUUAGUCCGUUAAUAAAGGCAUC mmu-mir-7228 MI0023723 Mus musculus miR-7228 stem-loop\nUGGCGACCUGAACAGAUGUCGCAGUGUUCGGUCUCCAGU cin-mir-4103 MI0015657 Ciona intestinalis miR-4103 stem-loop\nACCACGGGUCUGUGACGUAGCAGCGCUGCGGGUCCGCUGU\n\n$ fakit sort -l hairpin.fa.gz  Sorting or filtering by GC (or other base by -flag  -B ) content could also achieved in similar way.    Get first 1000 sequences  $ fakit fx2tab hairpin.fa.gz | head -n 1000 | fakit tab2fx\n\n$ fakit fx2tab reads_1.fq.gz | head -n 1000 | fakit tab2fx    Extension  After converting FASTA to tabular format with  fakit fx2tab ,\nit could be handled with CSV/TSV tools,\n e.g.  csvtk , a cross-platform, efficient and practical CSV/TSV toolkit   csvtk grep  could be used to filter sequences (similar with  fakit grep )  csvtk inter \ncomputates intersection of multiple files. It could achieve similar function\nas  fakit common -n  along with shell.  csvtk join  joins multiple CSV/TSV files by multiple IDs.  csv_melt \nprovides melt function, could be used in preparation of data for ploting.", 
            "title": "fx2tab &amp; tab2fx"
        }, 
        {
            "location": "/usage/#grep", 
            "text": "Usage  search sequences by pattern(s) of name or sequence motifs\n\nUsage:\n  fakit grep [flags]\n\nFlags:\n  -n, --by-name               match by full name instead of just id\n  -s, --by-seq                match by seq\n  -d, --degenerate            pattern/motif contains degenerate base\n      --delete-matched        delete matched pattern to speedup\n  -i, --ignore-case           ignore case\n  -v, --invert-match          invert the sense of matching, to select non-matching records\n  -p, --pattern value         search pattern (multiple values supported) (default [])\n  -f, --pattern-file string   pattern file\n  -r, --use-regexp            patterns are regular expression  Examples    Extract human hairpins (i.e. sequences with name starting with  hsa )  $ zcat hairpin.fa.gz | fakit grep -r -p ^hsa hsa-let-7a-1 MI0000060 Homo sapiens let-7a-1 stem-loop\nUGGGAUGAGGUAGUAGGUUGUAUAGUUUUAGGGUCACACCCACCACUGGGAGAUAACUAU\nACAAUCUACUGUCUUUCCUA hsa-let-7a-2 MI0000061 Homo sapiens let-7a-2 stem-loop\nAGGUUGAGGUAGUAGGUUGUAUAGUUUAGAAUUACAUCAAGGGAGAUAACUGUACAGCCU\nCCUAGCUUUCCU    Remove human and mice hairpins.  $ zcat hairpin.fa.gz | fakit grep -r -p ^hsa -p ^mmu -v    Extract new entries by information from miRNA.diff.gz    Get IDs of new entries.  $ zcat miRNA.diff.gz | grep ^# -v | grep NEW | cut -f 2   list\n$ more list\ncfa-mir-486\ncfa-mir-339-1\npmi-let-7    Extract by ID list file  $ zcat hairpin.fa.gz | fakit grep -f list   new.fa      Extract sequences starting with AGGCG  $ zcat hairpin.fa.gz | fakit grep -s -r -i -p ^aggcg    Extract sequences with TTSAA (AgsI digest site) in SEQUENCE. Base S stands for C or G.  $ zcat hairpin.fa.gz | fakit grep -s -d -i -p TTSAA  It's equal to but simpler than:  $ zcat hairpin.fa.gz | fakit grep -s -r -i -p TT[CG]AA", 
            "title": "grep"
        }, 
        {
            "location": "/usage/#locate", 
            "text": "Usage  locate subsequences/motifs\n\nMotifs could be EITHER plain sequence containing  ACTGN  OR regular\nexpression like  A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)  for ORFs.\nDegenerate bases like  RYMM..  are also supported by flag -d.\n\nBy default, motifs are treated as regular expression.\nWhen flag -d given, regular expression may be wrong.\nFor example:  \\w  will be wrongly converted to  \\[AT] .\n\nUsage:\n  fakit locate [flags]\n\nFlags:\n  -d, --degenerate                pattern/motif contains degenerate base\n  -i, --ignore-case               ignore case\n  -P, --only-positive-strand      only search at positive strand\n  -p, --pattern value             search pattern/motif (multiple values supported) (default [])\n  -f, --pattern-file string       pattern/motif file (FASTA format)\n  -V, --validate-seq-length int   length of sequence to validate (0 for whole seq) (default 10000)  Examples    Locate ORFs.  $ zcat hairpin.fa.gz | fakit locate -i -p \"A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)\"\nseqID   patternName     pattern strand  start   end     matched\ncel-lin-4       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        +  136      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGA\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        +  54       95      AUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAG\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        -  43       51      AUGAUAUAG    Locate Motif.  $ zcat hairpin.fa.gz | fakit locate -i -p UUS\nseqID   patternName     pattern strand  start   end     matched\nbna-MIR396a     UUS     UUS     -       105     107     UUS\nbna-MIR396a     UUS     UUS     -       89      91      UUS  Notice that  fakit grep  only searches in positive strand, but  fakit loate  could recognize both strand", 
            "title": "locate"
        }, 
        {
            "location": "/usage/#rmdup", 
            "text": "Usage  remove duplicated sequences by id/name/sequence\n\nUsage:\n  fakit rmdup [flags]\n\nFlags:\n    -n, --by-name                by full name instead of just id\n    -s, --by-seq                 by seq\n    -D, --dup-num-file string    file to save number and list of duplicated seqs\n    -d, --dup-seqs-file string   file to save duplicated seqs\n    -i, --ignore-case            ignore case\n    -m, --md5                    use MD5 instead of original seqs to reduce memory usage when comparing by seqs  Examples  Similar to  common .    General use  $ zcat hairpin.fa.gz | fakit rmdup -s -o clean.fa.gz\n[INFO] 2226 duplicated records removed\n\n$ zcat reads_1.fq.gz | fakit rmdup -s -o clean.fa.gz\n[INFO] 1086 duplicated records removed    Save duplicated sequences to file  $ zcat hairpin.fa.gz | fakit rmdup -s -i -m -o clean.fa.gz -d duplicated.fa.gz -D duplicated.detail.txt\n\n$ cat duplicated.detail.txt   # here is not the entire list\n3   hsa-mir-424, mml-mir-424, ppy-mir-424\n3   hsa-mir-342, mml-mir-342, ppy-mir-342\n2   ngi-mir-932, nlo-mir-932\n2   ssc-mir-9784-1, ssc-mir-9784-2", 
            "title": "rmdup"
        }, 
        {
            "location": "/usage/#common", 
            "text": "Usage  find common sequences of multiple files by id/name/sequence\n\nUsage:\n  fakit common [flags]\n\nFlags:\n    -n, --by-name       match by full name instead of just id\n    -s, --by-seq        match by sequence\n    -i, --ignore-case   ignore case\n    -m, --md5           use MD5 instead of original seqs to reduce memory usage when comparing by seqs  Examples    By ID (default)  fakit common file*.fa -o common.fasta    By full name  fakit common file*.fa -n -o common.fasta    By sequence  fakit common file*.fa -s -i -o common.fasta    By sequence ( for large sequences )  fakit common file*.fa -s -i -o common.fasta --md5", 
            "title": "common"
        }, 
        {
            "location": "/usage/#split", 
            "text": "Usage  split sequences into files by name ID, subsequence of given region,\npart size or number of parts.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4      C G T\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit split [flags]\n\nFlags:\n  -i, --by-id              split squences according to sequence ID\n  -p, --by-part int        split squences into N parts\n  -r, --by-region string   split squences according to subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases. type  fakit split -h  for more examples\n  -s, --by-size int        split squences into multi parts with N sequences\n  -d, --dry-run            dry run, just print message and no files will be created.\n  -k, --keep-temp          keep tempory FASTA and .fai file when using 2-pass mode\n  -m, --md5                use MD5 instead of region sequence in output file when using flag -r (--by-region)\n  -2, --two-pass           two-pass mode read files twice to lower memory usage. (only for FASTA format)  Examples    Split sequences into parts with at most 10000 sequences  $ fakit split hairpin.fa.gz -s 10000\n[INFO] split into 10000 seqs per file\n[INFO] write 10000 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 10000 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 8645 sequences to file: hairpin.fa.part_003.gz    Split sequences into 4 parts  $ fakit split hairpin.fa.gz -p 4\n[INFO] split into 4 parts\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 7162 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_003.gz\n[INFO] write 7159 sequences to file: hairpin.fa.part_004.gz  To reduce memory usage when spliting big file, we should alwasy use flag  --two-pass  $ fakit split hairpin.fa.gz -p 4 -2\n[INFO] split into 4 parts\n[INFO] read and write sequences to tempory file: hairpin.fa.gz.fa ...\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 28645 sequences loaded\n[INFO] write 7162 sequences to file: hairpin.part_001.fa.gz\n[INFO] write 7162 sequences to file: hairpin.part_002.fa.gz\n[INFO] write 7162 sequences to file: hairpin.part_003.fa.gz\n[INFO] write 7159 sequences to file: hairpin.part_004.fa.gz    Split sequences by species. i.e. by custom IDs (first three letters)  $ fakit split hairpin.fa.gz -i --id-regexp \"^([\\w]+)\\-\" -2\n[INFO] split by ID. idRegexp: ^([\\w]+)\\-\n[INFO] read and write sequences to tempory file: hairpin.fa.gz.fa ...\n[INFO] create and read FASTA index ...\n[INFO] create FASTA index for hairpin.fa.gz.fa\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 28645 sequences loaded\n[INFO] write 48 sequences to file: hairpin.id_cca.fa.gz\n[INFO] write 3 sequences to file: hairpin.id_hci.fa.gz\n[INFO] write 106 sequences to file: hairpin.id_str.fa.gz\n[INFO] write 1 sequences to file: hairpin.id_bkv.fa.gz\n...    Split sequences by sequence region (for example, sequence barcode)  $ fakit split hairpin.fa.gz -r 1:3 -2\n[INFO] split by region: 1:3\n[INFO] read and write sequences to tempory file: hairpin.fa.gz.fa ...\n[INFO] read sequence IDs and sequence region from FASTA file ...\n[INFO] create and read FASTA index ...\n[INFO] write 463 sequences to file: hairpin.region_1:3_AUG.fa.gz\n[INFO] write 349 sequences to file: hairpin.region_1:3_ACU.fa.gz\n[INFO] write 311 sequences to file: hairpin.region_1:3_CGG.fa.gz  If region is too long, we could use falg  --md5 ,\ni.e. use MD5 instead of region sequence in output file.  Sequence suffix could be defined as  -r -12:-1", 
            "title": "split"
        }, 
        {
            "location": "/usage/#sample", 
            "text": "Usage  sample sequences by number or proportion.\n\nUsage:\n  fakit sample [flags]\n\nFlags:\n  -n, --number int         sample by number (result may not exactly match)\n  -p, --proportion float   sample by proportion\n  -s, --rand-seed int      rand seed for shuffle (default 11)\n  -2, --two-pass           2-pass mode read files twice to lower memory usage. Not allowed when reading from stdin  Examples    Sample by proportion  $ zcat hairpin.fa.gz | fakit sample -p 0.1 -o sample.fa.gz\n[INFO] sample by proportion\n[INFO] 2814 sequences outputed    Sample by number  $ zcat hairpin.fa.gz | fakit sample -n 1000 -o sample.fa.gz\n[INFO] sample by number\n[INFO] 949 sequences outputed  To reduce memory usage when spliting big file, we could use flag  --two-pass  We can also use  fakit sample -p  followed with  fakit head -n :  $ zcat hairpin.fa.gz | fakit sample -p 0.1 | fakit head -n 1000 -o sample.fa.gz    Set rand seed to reproduce the result  $ zcat hairpin.fa.gz | fakit sample -p 0.1 -s 11    Most of the time, we could shuffle after sampling  $ zcat hairpin.fa.gz | fakit sample -p 0.1 | fakit shuffle -o sample.fa.gz    Note that when sampling on FASTQ files, make sure using same random seed by\nflag  -s  ( --rand-seed )", 
            "title": "sample"
        }, 
        {
            "location": "/usage/#head", 
            "text": "Usage  print first N FASTA/Q records\n\nUsage:\n  fakit head [flags]\n\nFlags:\n  -n, --number int   print first N FASTA/Q records (default 10)  Examples    FASTA  $ fakit head -n 1 hairpin.fa.gz   cel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAAC\nUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA     FASTQ  $ fakit head -n 1 reads_1.fq.gz\n@HWI-D00523:240:HF3WGBCXX:1:1101:2574:2226 1:N:0:CTGTAG\nTGAGGAATATTGGTCAATGGGCGCGAGCCTGAACCAGCCAAGTAGCGTGAAGGATGACTG\nCCCTACGGGTTGTAAACTTCTTTTATAAAGGAATAAAGTGAGGCACGTGTGCCTTTTTGT\nATGTACTTTATGAATAAGGATCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGA\nTCCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGCAGGCGGT\n+\nHIHIIIIIHIIHGHHIHHIIIIIIIIIIIIIIIHHIIIIIHHIHIIIIIGIHIIIIHHHH\nHHGHIHIIIIIIIIIIIGHIIIIIGHIIIIHIIHIHHIIIIHIHHIIIIIIIGIIIIIII\nHIIIIIGHIIIIHIIIH?DGHEEGHIIIIIIIIIIIHIIHIIIHHIIHIHHIHCHHIIHG\nIHHHHHHH GG?B@EHDE-BEHHHII5B@GHHF?CGEHHHDHIHIIH", 
            "title": "head"
        }, 
        {
            "location": "/usage/#replace", 
            "text": "Usage  replace name/sequence/by regular expression.\n\nNote that the replacement supports capture variables.\ne.g. $1 represents the text of the first submatch.\nATTENTION: use SINGLE quote NOT double quotes in *nix OS.\n\nExamples: Adding space to all bases.\n\n    fakit replace -p  (.)  -r '$1 ' -s\n\nOr use the \\ escape character.\n\n    fakit replace -p  (.)  -r  \\$1   -s\n\nmore on: http://shenwei356.github.io/fakit/usage/#replace\n\nUsage:\n  fakit replace [flags]\n\nFlags:\n  -s, --by-seq               replace seq\n  -i, --ignore-case          ignore case\n  -p, --pattern string       search regular expression\n  -r, --replacement string   replacement. supporting capture variables.  e.g. $1 represents the text of the first submatch. ATTENTION: use SINGLE quote NOT double quotes in *nix OS or use the \\ escape character. record number is also supported by  {NR}   Examples    Remove descriptions  $ echo -e \" seq1 abc-123\\nACGT-ACGT\" | fakit replace -p \" .+\" seq1\nACGT-ACGT    Replace \"-\" with \"=\"  $ echo -e \" seq1 abc-123\\nACGT-ACGT\" | fakit replace -p \"\\-\" -r '=' seq1 abc=123\nACGT-ACGT    Remove gaps in sequences.  $ echo -e \" seq1 abc-123\\nACGT-ACGT\" | fakit replace -p \" |-\" -s seq1 abc-123\nACGTACGT    Add space to every base.  ATTENTION: use SINGLE quote NOT double quotes in *nix OS  $ echo -e \" seq1 abc-123\\nACGT-ACGT\" | fakit replace -p \"(.)\" -r '$1 ' -s seq1 abc-123\nA C G T - A C G T    Transpose sequence with  csvtk  $ echo -e \" seq1\\nACTGACGT\\n seq2\\nactgccgt\" | fakit replace -p \"(.)\" -r     \"\\$1 \" -s | fakit seq -s -u | csvtk space2tab | csvtk -t transpose\nA       A\nC       C\nT       T\nG       G\nA       C\nC       C\nG       G\nT       T    Rename with number of record  echo -e \" abc\\nACTG\\n 123\\nATTT\" |  fakit replace -p .+ -r \"seq_{NR}\"  seq_1\nACTG seq_2\nATTT", 
            "title": "replace"
        }, 
        {
            "location": "/usage/#shuffle", 
            "text": "Usage  shuffle sequences.\n\nBy default, all records will be readed into memory.\nFor FASTA format, use flag -2 (--two-pass) to reduce memory usage. FASTQ not\nsupported.\n\nFirstly, fakit reads the sequence IDs. If the file is not plain FASTA file,\nfakit will write the sequences to tempory files, and create FASTA index.\n\nSecondly, fakit shuffles sequence IDs and extract sequences by FASTA index.\n\nATTENTION: the .fai file created by fakit is a little different from .fai file\ncreated by samtools. Fakit use full sequence head instead of just ID as key.\nSo please delete .fai file created by samtools.\n\nUsage:\n  fakit shuffle [flags]\n\nFlags:\n  -k, --keep-temp       keep tempory FASTA and .fai file when using 2-pass mode\n  -s, --rand-seed int   rand seed for shuffle (default 23)\n  -2, --two-pass        two-pass mode read files twice to lower memory usage. (only for FASTA format)  Examples    General use.  $ fakit shuffle hairpin.fa.gz   shuffled.fa\n[INFO] read sequences ...\n[INFO] 28645 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...    For big genome, you'd better use two-pass mode  so fakit could use\n   FASTA index to reduce memory usage  $ time fakit shuffle -2 hsa.fa   shuffle.fa\n[INFO] create and read FASTA index ...\n[INFO] create FASTA index for hsa.fa\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...\n\nreal    0m35.080s\nuser    0m45.521s\nsys     0m3.411s    Note that when sampling on FASTQ files, make sure using same random seed by\nflag  -s  ( --rand-seed ) for read 1 and 2 files.", 
            "title": "shuffle"
        }, 
        {
            "location": "/usage/#sort", 
            "text": "Usage  sort sequences by id/name/sequence/length.\n\nBy default, all records will be readed into memory.\nFor FASTA format, use flag -2 (--two-pass) to reduce memory usage. FASTQ not\nsupported.\n\nFirstly, fakit reads the sequence head and length information.\nIf the file is not plain FASTA file,\nfakit will write the sequences to tempory files, and create FASTA index.\n\nSecondly, fakit sort sequence by head and length information\nand extract sequences by FASTA index.\n\nATTENTION: the .fai file created by fakit is a little different from .fai file\ncreated by samtools. Fakit use full sequence head instead of just ID as key.\nSo please delete .fai file created by samtools.\n\nUsage:\n  fakit sort [flags]\n\nFlags:\n  -l, --by-length               by sequence length\n  -n, --by-name                 by full name instead of just id\n  -s, --by-seq                  by sequence\n  -i, --ignore-case             ignore case\n  -k, --keep-temp               keep tempory FASTA and .fai file when using 2-pass mode\n  -r, --reverse                 reverse the result\n  -L, --seq-prefix-length int   length of sequence prefix on which fakit sorts by sequences (0 for whole sequence) (default 10000)\n  -2, --two-pass                two-pass mode read files twice to lower memory usage. (only for FASTA format)  Examples  For FASTA format, use flag -2 (--two-pass) to reduce memory usage    sort by ID  $ echo -e \" seq1\\nACGTNcccc\\n SEQ2\\nacgtnAAAA\" | fakit sort --quiet SEQ2\nacgtnAAAA seq1\nACGTNcccc    sort by ID, ignoring case.  $ echo -e \" seq1\\nACGTNcccc\\n SEQ2\\nacgtnAAAA\" | fakit sort --quiet -i seq1\nACGTNcccc SEQ2\nacgtnAAAA    sort by seq, ignoring case.  $ echo -e \" seq1\\nACGTNcccc\\n SEQ2\\nacgtnAAAA\" | fakit sort --quiet -s -i SEQ2\nacgtnAAAA seq1\nACGTNcccc    sort by sequence length  $ echo -e \" seq1\\nACGTNcccc\\n SEQ2\\nacgtnAAAAnnn\\n seq3\\nacgt\" | fakit sort --quiet -l seq3\nacgt seq1\nACGTNcccc SEQ2\nacgtnAAAAnnn     \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "sort"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Tutorial\n\n\nSome manipulations on big genomes\n\n\nA script \nmemusg\n is\nused to check the peek memory usage of fakit. Usage: \nmemusg [-t] command\n.\n\n\n\n\n\n\nHuman genome\n\n\n$ fakit stat hsa.fa\nfile     seq_format   seq_type   num_seqs   min_len        avg_len       max_len\nhsa.fa   FASTA        DNA             194       970   15,978,096.5   248,956,422\n\n\n\n\n\n\n\nBuild FASTA index (\noptional\n, when using flag \n-2\n (\n--two-pass\n),\n   some commands will automaticlly build it).\n   For some commands, including \nsubseq\n, \nsplit\n, \nsort\n and \nshuffle\n,\n   when input files are (plain or gzipped) FASTA files or stdin,\n   FASTA index would be optional used for\n   rapid acccess of sequences and reducing memory occupation.\n   \nATTENTION\n: the \n.fakit.fai\n file created by fakit is a little different from .fai file\n   created by samtools. fakit uses full sequence head instead of just ID as key.\n\n\n$ memusg -t fakit faidx --id-regexp \"^(.+)$\"  hsa.fa -o hsa.fa.fakit.fai\n\nelapsed time: 10.011s\npeak rss: 177.21 MB\n\n\n\nCreate common .fai file:\n\n\n$ memusg -t fakit faidx hsa.fa -o hsa.fa.fai2\n\nelapsed time: 10.454s\npeak rss: 172.82 MB\n\n\n\nPerformance of samtools:\n\n\n$ memusg -t samtools faidx hsa.fa\n\nelapsed time: 9.574s\npeak rss: 1.45 MB\n\n\n\nExactly same content:\n\n\n$ md5sum hsa.fa.fai*\n21e0c25b4d817d1c19ee8107191b9b31  hsa.fa.fai\n21e0c25b4d817d1c19ee8107191b9b31  hsa.fa.fai2\n\n\n\n\n\n\n\nSorting by sequence length\n\n\n$ memusg -t fakit sort --by-length --reverse --two-pass hsa.fa \n hsa.sorted.fa\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs and lengths from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] sorting ...\n[INFO] output ...\n\nelapsed time: 4.892s\npeak rss: 500.15 MB\n\n\n\nDetail:\n\n\n$ fakit fx2tab --length hsa.sorted.fa --name --only-id | cut -f 1,4 | more\n1       248956422\n2       242193529\n3       198295559\n4       190214555\n5       181538259\n6       170805979\n7       159345973\nX       156040895\n8       145138636\n9       138394717\n11      135086622\n10      133797422\n12      133275309\n13      114364328\n14      107043718\n15      101991189\n16      90338345\n17      83257441\n18      80373285\n20      64444167\n19      58617616\nY       57227415\n22      50818468\n21      46709983\nKI270728.1      1872759\nKI270727.1      448248\n...\n\nreal    0m10.697s\nuser    0m11.153s\nsys     0m0.917s\n\n\n\n\n\n\n\nShuffling sequences\n\n\n$ memusg -t fakit shuffle hsa.fa --two-pass \n hsa.shuffled.fa\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...\n\nelapsed time: 6.632s\npeak rss: 528.3 MB\n\n\n\n\n\n\n\nSpliting into files with single sequence\n\n\n$ memusg -t fakit split --by-id hsa.fa --two-pass\n[INFO] split by ID. idRegexp: ^([^\\s]+)\\s?\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] write 1 sequences to file: hsa.id_KI270743.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270706.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270717.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270718.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270468.1.fa\n...\n\nelapsed time: 18.807s\npeak rss: 1.36 GB\n\n\n\n\n\n\n\nGeting subsequence of some chromesomes\n\n\n$ memusg -t fakit subseq -r 1:10 --chr X --chr Y  hsa.fa\n\nX_1-10 X dna_sm:chromosome chromosome:GRCh38:X:1:156040895:1 REF\nnnnnnnnnnn\n\nY_1-10 Y dna_sm:chromosome chromosome:GRCh38:Y:2781480:56887902:1 REF\nNNNNNNNNNN\n\nelapsed time: 1.276s\npeak rss: 640.92 MB\n\n\n\n\n\n\n\nGeting CDS sequence of chr 1 by GTF files\n\n\n$ memusg -t fakit subseq --gtf Homo_sapiens.GRCh38.84.gtf.gz --chr X --feature cds  hsa.fa \n chrX.gtf.cds.fa\n[INFO] read GTF file ...\n[INFO] 22420 GTF features loaded\n\nelapsed time: 8.643s\npeak rss: 846.14 MB\n\n\n\n\n\n\n\nRemove contaminated reads\n\n\n\n\n\n\nMapping with reads on some potential contaminate genomes, and get the reads IDs list.\n\n\n$ wc -l contaminate.list\n244 contaminate.list\n\n$ head -n 2 contaminate.list\nHWI-D00523:240:HF3WGBCXX:1:1101:2574:2226\nHWI-D00523:240:HF3WGBCXX:1:1101:12616:2205\n\n\n\n\n\n\n\nRemove contaminated reads\n\n\n$ fakit grep -f contaminate.list -v reads_1.fq.gz -o reads_1.clean.fq.gz\n$ fakit grep -f contaminate.list -v reads_2.fq.gz -o reads_2.clean.fq.gz\n\n$ fakit stat *.fq.gz\nfile                  seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nreads_1.clean.fq.gz   FASTQ        DNA           2,256       226       227       229\nreads_1.fq.gz         FASTQ        DNA           2,500       226       227       229\nreads_2.clean.fq.gz   FASTQ        DNA           2,256       223       224       225\nreads_2.fq.gz         FASTQ        DNA           2,500       223       224       225\n\n\n\n\n\n\n\nHandling of aligned sequences\n\n\n\n\n\n\nSome mock sequences (usually they will be much longer)\n\n\n$ cat seqs.fa\n\nseq1\nACAACGTCTACTTACGTTGCATCGTCATGCTGCATTACGTAGTCTGATGATG\n\nseq2\nACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG\n\nseq3\nACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG\n\nseq4\nACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG\n\n\n\n\n\n\n\nRun multiple sequence alignment (clustalo)\n\n\nclustalo -i seqs.fa -o seqs.msa.fa --force --outfmt fasta --threads=4\n\n\n\n\n\n\n\nConvert FASTA format to tabular format.\n\n\n$ fakit fx2tab seqs.msa.fa\nseq1    ACAACGTCTACTTACGTTGCAT----CGTCATGCTGCATTACGTAGTCTGATGATG\nseq2    ---------------ACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG\nseq3    ACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG-------------\nseq4    ACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG\n\n\n\nor\n\n\n$ fakit fx2tab seqs.msa.fa | cut -f 2\nACAACGTCTACTTACGTTGCAT----CGTCATGCTGCATTACGTAGTCTGATGATG\n---------------ACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG\nACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG-------------\nACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG\n\n\n\nFor me, it's useful when 1) manually assembling Sanger sequencing result,\n2) designing site specific PCR primers.\n\n\n\n\n\n\nRemove gaps\n\n\n$ fakit seq seqs.msa.fa -g\n\nseq1\nACAACGTCTACTTACGTTGCATCGTCATGCTGCATTACGTAGTCTGATGATG\n\nseq2\nACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG\n\nseq3\nACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG\n\nseq4\nACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG\n\n\n\n\n\n\n\nPlay with miRNA hairpins\n\n\nDataset\n\n\nhairpin.fa.gz\n\nfrom \nThe miRBase Sequence Database -- Release 21\n\n\nQuick glance\n\n\n\n\n\n\nSequence number\n\n\n$ fakit stat hairpin.fa.gz\nfile             seq_type    num_seqs    min_len    avg_len    max_len\nhairpin.fa.gz         RNA      28,645         39        103      2,354\n\n\n\n\n\n\n\nFirst 10 bases\n\n\n$ zcat hairpin.fa.gz | fakit subseq -r 1:10 | fakit sort -s | fakit seq -s | head -n 10\nAAAAAAAAAA\nAAAAAAAAAA\nAAAAAAAAAG\nAAAAAAAAAG\nAAAAAAAAAG\nAAAAAAAAAU\nAAAAAAAAGG\nAAAAAAACAU\nAAAAAAACGA\nAAAAAAAUUA\n\n\n\nhmm, nothing special, non-coding RNA~\n\n\n\n\n\n\nRepeated hairpin sequences\n\n\nWe may want to check how may identical hairpins among different species there are.\n\nfakit rmdup\n could remove duplicated sequences by sequence content,\nand save the replicates to another file (here is \nduplicated.fa.gz\n),\nas well as replicating details (\nduplicated.detail.txt\n,\n1th column is the repeated number,\n2nd column contains sequence IDs seperated by comma).\n\n\n$ fakit rmdup -s -i hairpin.fa.gz -o clean.fa.gz -d duplicated.fa.gz -D duplicated.detail.txt\n\n$ head -n 5 duplicated.detail.txt\n18      dre-mir-430c-1, dre-mir-430c-2, dre-mir-430c-3, dre-mir-430c-4, dre-mir-430c-5, dre-mir-430c-6, dre-mir-430c-7, dre-mir-430c-8, dre-mir-430c-9, dre-mir-430c-10, dre-mir-430c-11, dre-mir-430c-12, dre-mir-430c-13, dre-mir-430c-14, dre-mir-430c-15, dre-mir-430c-16, dre-mir-430c-17, dre-mir-430c-18\n16      hsa-mir-29b-2, mmu-mir-29b-2, rno-mir-29b-2, ptr-mir-29b-2, ggo-mir-29b-2, ppy-mir-29b-2, sla-mir-29b, mne-mir-29b, ppa-mir-29b-2, bta-mir-29b-2, mml-mir-29b-2, eca-mir-29b-2, aja-mir-29b, oar-mir-29b-1, oar-mir-29b-2, rno-mir-29b-3\n15      dme-mir-125, dps-mir-125, dan-mir-125, der-mir-125, dgr-mir-125-1, dgr-mir-125-2, dmo-mir-125, dpe-mir-125-2, dpe-mir-125-1, dpe-mir-125-3, dse-mir-125, dsi-mir-125, dvi-mir-125, dwi-mir-125, dya-mir-125\n13      hsa-mir-19b-1, ggo-mir-19b-1, age-mir-19b-1, ppa-mir-19b-1, ppy-mir-19b-1, ptr-mir-19b-1, mml-mir-19b-1, sla-mir-19b-1, lla-mir-19b-1, mne-mir-19b-1, bta-mir-19b, oar-mir-19b, chi-mir-19b\n13      hsa-mir-20a, ssc-mir-20a, ggo-mir-20a, age-mir-20, ppa-mir-20, ppy-mir-20a, ptr-mir-20a, mml-mir-20a, sla-mir-20, lla-mir-20, mne-mir-20, bta-mir-20a, eca-mir-20a\n\n\n\nThe result shows the most conserved miRNAs among different species,\n\nmir-29b\n, \nmir-125\n, \nmir-19b-1\n and \nmir-20a\n.\nAnd the \ndre-miR-430c\n has the most multicopies in \nDanio rerio\n.\n\n\nHairpins in different species\n\n\n\n\n\n\nBefore spliting by species, let's take a look at the sequence names.\n\n\n$ fakit seq hairpin.fa.gz -n | head -n 3\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop\n\n\n\nThe first three letters (e.g. \ncel\n) are the abbreviation of species names.\nSo we could split hairpins by the first letters by defining custom\nsequence ID parsing regular expression \n^([\\w]+)\\-\n.\n\n\nBy default, \nfakit\n takes the first non-space letters as sequence ID.\nFor example,\n\n\n\n\n\n\n\n\nFASTA head\n\n\nID\n\n\n\n\n\n\n\n\n\n\n123456 gene name\n\n\n123456\n\n\n\n\n\n\nlongname\n\n\nlongname\n\n\n\n\n\n\ngi\n110645304\nref\nNC_002516.2\n Pseudomona\n\n\ngi\n110645304\nref\nNC_002516.2\n\n\n\n\n\n\n\n\nBut for some sequences from NCBI,\ne.g. \ngi|110645304|ref|NC_002516.2| Pseudomona\n, the ID is \nNC_002516.2\n.\nIn this case, we could set sequence ID parsing regular expression by flag\n\n--id-regexp \"\\|([^\\|]+)\\| \"\n or just use flag \n--id-ncbi\n. If you want\nthe \ngi\n number, then use \n--id-regexp \"^gi\\|([^\\|]+)\\|\"\n.\n\n\n\n\n\n\nSplit sequences by species.\nA custom ID parsing regular expression is used, \n^([\\w]+)\\-\n.\n\n\n$ fakit split hairpin.fa.gz -i --id-regexp \"^([\\w]+)\\-\" --two-pass\n\n\n\nTo reduce memory usage when spliting big file, we should alwasy use flag \n--two-pass\n\n\n\n\n\n\nSpecies with most miRNA hairpins. Third column is the sequences number.\n\n\n$ fakit stat hairpin.id_*.gz | csvtk space2tab | csvtk -t sort -k num_seqs:nr | csvtk -t pretty| more\nfile                     seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nhairpin.id_hsa.fa.gz     FASTA        RNA        1,881      41        81.9      180\nhairpin.id_mmu.fa.gz     FASTA        RNA        1,193      39        83.4      147\nhairpin.id_bta.fa.gz     FASTA        RNA        808        53        80.1      149\nhairpin.id_gga.fa.gz     FASTA        RNA        740        48        91.5      169\nhairpin.id_eca.fa.gz     FASTA        RNA        715        52        104.6     145\nhairpin.id_mtr.fa.gz     FASTA        RNA        672        54        165.3     910\n\n\n\nHere, a CSV/TSV tool \ncsvtk\n\nis used to sort and view the result.\n\n\n\n\n\n\nFor human miRNA hairpins\n\n\n\n\n\n\nLength distribution.\n \nfakit fx2tab\n could show extra information like sequence length, GC content.\n A distribution ploting script is used, (\n \nplot_distribution.py\n )\n\n\n$ fakit fx2tab hairpin.id_hsa.fa.gz -l | cut -f 3  | plot_distribution.py -o hairpin.id_hsa.fa.gz.lendist.png\n\n\n\n\n\n\n\n\n\nBacteria genome\n\n\nDataset\n\n\nPseudomonas aeruginosa PAO1\n,\nfiles:\n\n\n\n\nGenbank file \nPAO1.gb\n\n\nGenome FASTA file \nPAO1.fasta\n\n\nGTF file \nPAO1.gtf\n was created with \nextract_features_from_genbank_file.py\n, by\nextract_features_from_genbank_file.py  PAO1.gb -t . -f gtf \n PAO1.gtf\n\n\n\n\n\n\n\nMotif distribution\n\n\nMotifs\n\n\n$ cat motifs.fa\n\nGTAGCGS\nGTAGCGS\n\nGGWGKTCG\nGGWGKTCG\n\n\n\n\n\n\n\nSliding. Remember flag \n--id-ncbi\n, do you?\n  By the way, do not be scared by the long flag \n--circle-genome\n, \n--step\n\n  and so on. They have short ones, \n-c\n, \n-s\n\n\n$ fakit sliding --id-ncbi --circle-genome --step 20000 --window 200000 PAO1.fasta -o PAO1.fasta.sliding.fa\n\n$ fakit stat PAO1.fasta.sliding.fa\nfile                     seq_type    num_seqs    min_len    avg_len    max_len\nPAO1.fasta.sliding.fa         DNA         314    200,000    200,000    200,000\n\n\n\n\n\n\n\nLocating motifs\n\n\n$ fakit locate --id-ncbi --ignore-case --degenerate --pattern-file motifs.fa  PAO1.fasta.sliding.fa -o  PAO1.fasta.sliding.fa.motifs.tsv\n\n\n\n\n\n\n\nPloting distribution (\nplot_motif_distribution.R\n)\n\n\n# preproccess\n$ perl -ne 'if (/_sliding:(\\d+)-(\\d+)\\t(.+)/) {$loc= $1 + 100000; print \"$loc\\t$3\\n\";} else {print}' PAO1.fasta.sliding.fa.motifs.tsv  \n PAO1.fasta.sliding.fa.motifs.tsv2\n\n# plot\n$ ./plot_motif_distribution.R\n\n\n\nResult\n\n\n\n\n\n\n\n\nFind multicopy genes\n\n\n\n\n\n\nGet all CDS sequences\n\n\n$ fakit subseq --id-ncbi --gtf PAO1.gtf --feature cds PAO1.fasta -o PAO1.cds.fasta\n\n$ fakit stat *.fasta\nfile              seq_type    num_seqs      min_len      avg_len      max_len\nPAO1.cds.fasta         DNA       5,572           72      1,003.8       16,884\nPAO1.fasta             DNA           1    6,264,404    6,264,404    6,264,404\n\n\n\n\n\n\n\nGet duplicated sequences\n\n\n$ fakit rmdup --by-seq --ignore-case PAO1.cds.fasta -o PAO1.cds.uniq.fasta --dup-seqs-file PAO1.cds.dup.fasta --dup-num-file PAO1.cds.dup.text\n\n$ cat PAO1.cds.dup.text\n6       NC_002516.2_500104:501120:-, NC_002516.2_2556948:2557964:+, NC_002516.2_3043750:3044766:-, NC_002516.2_3842274:3843290:-, NC_002516.2_4473623:4474639:+, NC_002516.2_5382796:5383812:-\n2       NC_002516.2_2073555:2075438:+, NC_002516.2_4716660:4718543:+\n2       NC_002516.2_2072935:2073558:+, NC_002516.2_4716040:4716663:+\n2       NC_002516.2_2075452:2076288:+, NC_002516.2_4718557:4719393:+\n\n\n\n\n\n\n\nFlanking sequences\n\n\n\n\n\n\nGet CDS and 1000 bp upstream sequence\n\n\n$ fakit subseq --id-ncbi --gtf PAO1.gtf --feature cds PAO1.fasta --up-stream 1000\n\n\n\n\n\n\n\nGet 1000 bp upstream sequence of CDS, \nNOT\n including CDS.\n\n\n$ fakit subseq --id-ncbi --gtf PAO1.gtf --feature cds PAO1.fasta --up-stream 1000 --only-flank\n\n\n\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#tutorial", 
            "text": "", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#some-manipulations-on-big-genomes", 
            "text": "A script  memusg  is\nused to check the peek memory usage of fakit. Usage:  memusg [-t] command .    Human genome  $ fakit stat hsa.fa\nfile     seq_format   seq_type   num_seqs   min_len        avg_len       max_len\nhsa.fa   FASTA        DNA             194       970   15,978,096.5   248,956,422    Build FASTA index ( optional , when using flag  -2  ( --two-pass ),\n   some commands will automaticlly build it).\n   For some commands, including  subseq ,  split ,  sort  and  shuffle ,\n   when input files are (plain or gzipped) FASTA files or stdin,\n   FASTA index would be optional used for\n   rapid acccess of sequences and reducing memory occupation.\n    ATTENTION : the  .fakit.fai  file created by fakit is a little different from .fai file\n   created by samtools. fakit uses full sequence head instead of just ID as key.  $ memusg -t fakit faidx --id-regexp \"^(.+)$\"  hsa.fa -o hsa.fa.fakit.fai\n\nelapsed time: 10.011s\npeak rss: 177.21 MB  Create common .fai file:  $ memusg -t fakit faidx hsa.fa -o hsa.fa.fai2\n\nelapsed time: 10.454s\npeak rss: 172.82 MB  Performance of samtools:  $ memusg -t samtools faidx hsa.fa\n\nelapsed time: 9.574s\npeak rss: 1.45 MB  Exactly same content:  $ md5sum hsa.fa.fai*\n21e0c25b4d817d1c19ee8107191b9b31  hsa.fa.fai\n21e0c25b4d817d1c19ee8107191b9b31  hsa.fa.fai2    Sorting by sequence length  $ memusg -t fakit sort --by-length --reverse --two-pass hsa.fa   hsa.sorted.fa\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs and lengths from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] sorting ...\n[INFO] output ...\n\nelapsed time: 4.892s\npeak rss: 500.15 MB  Detail:  $ fakit fx2tab --length hsa.sorted.fa --name --only-id | cut -f 1,4 | more\n1       248956422\n2       242193529\n3       198295559\n4       190214555\n5       181538259\n6       170805979\n7       159345973\nX       156040895\n8       145138636\n9       138394717\n11      135086622\n10      133797422\n12      133275309\n13      114364328\n14      107043718\n15      101991189\n16      90338345\n17      83257441\n18      80373285\n20      64444167\n19      58617616\nY       57227415\n22      50818468\n21      46709983\nKI270728.1      1872759\nKI270727.1      448248\n...\n\nreal    0m10.697s\nuser    0m11.153s\nsys     0m0.917s    Shuffling sequences  $ memusg -t fakit shuffle hsa.fa --two-pass   hsa.shuffled.fa\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...\n\nelapsed time: 6.632s\npeak rss: 528.3 MB    Spliting into files with single sequence  $ memusg -t fakit split --by-id hsa.fa --two-pass\n[INFO] split by ID. idRegexp: ^([^\\s]+)\\s?\n[INFO] create and read FASTA index ...\n[INFO] read sequence IDs from FASTA index ...\n[INFO] 194 sequences loaded\n[INFO] write 1 sequences to file: hsa.id_KI270743.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270706.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270717.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270718.1.fa\n[INFO] write 1 sequences to file: hsa.id_KI270468.1.fa\n...\n\nelapsed time: 18.807s\npeak rss: 1.36 GB    Geting subsequence of some chromesomes  $ memusg -t fakit subseq -r 1:10 --chr X --chr Y  hsa.fa X_1-10 X dna_sm:chromosome chromosome:GRCh38:X:1:156040895:1 REF\nnnnnnnnnnn Y_1-10 Y dna_sm:chromosome chromosome:GRCh38:Y:2781480:56887902:1 REF\nNNNNNNNNNN\n\nelapsed time: 1.276s\npeak rss: 640.92 MB    Geting CDS sequence of chr 1 by GTF files  $ memusg -t fakit subseq --gtf Homo_sapiens.GRCh38.84.gtf.gz --chr X --feature cds  hsa.fa   chrX.gtf.cds.fa\n[INFO] read GTF file ...\n[INFO] 22420 GTF features loaded\n\nelapsed time: 8.643s\npeak rss: 846.14 MB", 
            "title": "Some manipulations on big genomes"
        }, 
        {
            "location": "/tutorial/#remove-contaminated-reads", 
            "text": "Mapping with reads on some potential contaminate genomes, and get the reads IDs list.  $ wc -l contaminate.list\n244 contaminate.list\n\n$ head -n 2 contaminate.list\nHWI-D00523:240:HF3WGBCXX:1:1101:2574:2226\nHWI-D00523:240:HF3WGBCXX:1:1101:12616:2205    Remove contaminated reads  $ fakit grep -f contaminate.list -v reads_1.fq.gz -o reads_1.clean.fq.gz\n$ fakit grep -f contaminate.list -v reads_2.fq.gz -o reads_2.clean.fq.gz\n\n$ fakit stat *.fq.gz\nfile                  seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nreads_1.clean.fq.gz   FASTQ        DNA           2,256       226       227       229\nreads_1.fq.gz         FASTQ        DNA           2,500       226       227       229\nreads_2.clean.fq.gz   FASTQ        DNA           2,256       223       224       225\nreads_2.fq.gz         FASTQ        DNA           2,500       223       224       225", 
            "title": "Remove contaminated reads"
        }, 
        {
            "location": "/tutorial/#handling-of-aligned-sequences", 
            "text": "Some mock sequences (usually they will be much longer)  $ cat seqs.fa seq1\nACAACGTCTACTTACGTTGCATCGTCATGCTGCATTACGTAGTCTGATGATG seq2\nACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG seq3\nACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG seq4\nACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG    Run multiple sequence alignment (clustalo)  clustalo -i seqs.fa -o seqs.msa.fa --force --outfmt fasta --threads=4    Convert FASTA format to tabular format.  $ fakit fx2tab seqs.msa.fa\nseq1    ACAACGTCTACTTACGTTGCAT----CGTCATGCTGCATTACGTAGTCTGATGATG\nseq2    ---------------ACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG\nseq3    ACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG-------------\nseq4    ACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG  or  $ fakit fx2tab seqs.msa.fa | cut -f 2\nACAACGTCTACTTACGTTGCAT----CGTCATGCTGCATTACGTAGTCTGATGATG\n---------------ACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG\nACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG-------------\nACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG  For me, it's useful when 1) manually assembling Sanger sequencing result,\n2) designing site specific PCR primers.    Remove gaps  $ fakit seq seqs.msa.fa -g seq1\nACAACGTCTACTTACGTTGCATCGTCATGCTGCATTACGTAGTCTGATGATG seq2\nACACCGTCTACTTTCATGCTGCATTACGTAGTCTGATGATG seq3\nACAACGTCTACTTACGTTGCATCGTCATGCTGCACTGATGATG seq4\nACAACGTCTACTTACGTTGCATCTTCGGTCATGCTGCATTACGTAGTCTGATGATG", 
            "title": "Handling of aligned sequences"
        }, 
        {
            "location": "/tutorial/#play-with-mirna-hairpins", 
            "text": "", 
            "title": "Play with miRNA hairpins"
        }, 
        {
            "location": "/tutorial/#dataset", 
            "text": "hairpin.fa.gz \nfrom  The miRBase Sequence Database -- Release 21", 
            "title": "Dataset"
        }, 
        {
            "location": "/tutorial/#quick-glance", 
            "text": "Sequence number  $ fakit stat hairpin.fa.gz\nfile             seq_type    num_seqs    min_len    avg_len    max_len\nhairpin.fa.gz         RNA      28,645         39        103      2,354    First 10 bases  $ zcat hairpin.fa.gz | fakit subseq -r 1:10 | fakit sort -s | fakit seq -s | head -n 10\nAAAAAAAAAA\nAAAAAAAAAA\nAAAAAAAAAG\nAAAAAAAAAG\nAAAAAAAAAG\nAAAAAAAAAU\nAAAAAAAAGG\nAAAAAAACAU\nAAAAAAACGA\nAAAAAAAUUA  hmm, nothing special, non-coding RNA~", 
            "title": "Quick glance"
        }, 
        {
            "location": "/tutorial/#repeated-hairpin-sequences", 
            "text": "We may want to check how may identical hairpins among different species there are. fakit rmdup  could remove duplicated sequences by sequence content,\nand save the replicates to another file (here is  duplicated.fa.gz ),\nas well as replicating details ( duplicated.detail.txt ,\n1th column is the repeated number,\n2nd column contains sequence IDs seperated by comma).  $ fakit rmdup -s -i hairpin.fa.gz -o clean.fa.gz -d duplicated.fa.gz -D duplicated.detail.txt\n\n$ head -n 5 duplicated.detail.txt\n18      dre-mir-430c-1, dre-mir-430c-2, dre-mir-430c-3, dre-mir-430c-4, dre-mir-430c-5, dre-mir-430c-6, dre-mir-430c-7, dre-mir-430c-8, dre-mir-430c-9, dre-mir-430c-10, dre-mir-430c-11, dre-mir-430c-12, dre-mir-430c-13, dre-mir-430c-14, dre-mir-430c-15, dre-mir-430c-16, dre-mir-430c-17, dre-mir-430c-18\n16      hsa-mir-29b-2, mmu-mir-29b-2, rno-mir-29b-2, ptr-mir-29b-2, ggo-mir-29b-2, ppy-mir-29b-2, sla-mir-29b, mne-mir-29b, ppa-mir-29b-2, bta-mir-29b-2, mml-mir-29b-2, eca-mir-29b-2, aja-mir-29b, oar-mir-29b-1, oar-mir-29b-2, rno-mir-29b-3\n15      dme-mir-125, dps-mir-125, dan-mir-125, der-mir-125, dgr-mir-125-1, dgr-mir-125-2, dmo-mir-125, dpe-mir-125-2, dpe-mir-125-1, dpe-mir-125-3, dse-mir-125, dsi-mir-125, dvi-mir-125, dwi-mir-125, dya-mir-125\n13      hsa-mir-19b-1, ggo-mir-19b-1, age-mir-19b-1, ppa-mir-19b-1, ppy-mir-19b-1, ptr-mir-19b-1, mml-mir-19b-1, sla-mir-19b-1, lla-mir-19b-1, mne-mir-19b-1, bta-mir-19b, oar-mir-19b, chi-mir-19b\n13      hsa-mir-20a, ssc-mir-20a, ggo-mir-20a, age-mir-20, ppa-mir-20, ppy-mir-20a, ptr-mir-20a, mml-mir-20a, sla-mir-20, lla-mir-20, mne-mir-20, bta-mir-20a, eca-mir-20a  The result shows the most conserved miRNAs among different species, mir-29b ,  mir-125 ,  mir-19b-1  and  mir-20a .\nAnd the  dre-miR-430c  has the most multicopies in  Danio rerio .", 
            "title": "Repeated hairpin sequences"
        }, 
        {
            "location": "/tutorial/#hairpins-in-different-species", 
            "text": "Before spliting by species, let's take a look at the sequence names.  $ fakit seq hairpin.fa.gz -n | head -n 3\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop  The first three letters (e.g.  cel ) are the abbreviation of species names.\nSo we could split hairpins by the first letters by defining custom\nsequence ID parsing regular expression  ^([\\w]+)\\- .  By default,  fakit  takes the first non-space letters as sequence ID.\nFor example,     FASTA head  ID      123456 gene name  123456    longname  longname    gi 110645304 ref NC_002516.2  Pseudomona  gi 110645304 ref NC_002516.2     But for some sequences from NCBI,\ne.g.  gi|110645304|ref|NC_002516.2| Pseudomona , the ID is  NC_002516.2 .\nIn this case, we could set sequence ID parsing regular expression by flag --id-regexp \"\\|([^\\|]+)\\| \"  or just use flag  --id-ncbi . If you want\nthe  gi  number, then use  --id-regexp \"^gi\\|([^\\|]+)\\|\" .    Split sequences by species.\nA custom ID parsing regular expression is used,  ^([\\w]+)\\- .  $ fakit split hairpin.fa.gz -i --id-regexp \"^([\\w]+)\\-\" --two-pass  To reduce memory usage when spliting big file, we should alwasy use flag  --two-pass    Species with most miRNA hairpins. Third column is the sequences number.  $ fakit stat hairpin.id_*.gz | csvtk space2tab | csvtk -t sort -k num_seqs:nr | csvtk -t pretty| more\nfile                     seq_format   seq_type   num_seqs   min_len   avg_len   max_len\nhairpin.id_hsa.fa.gz     FASTA        RNA        1,881      41        81.9      180\nhairpin.id_mmu.fa.gz     FASTA        RNA        1,193      39        83.4      147\nhairpin.id_bta.fa.gz     FASTA        RNA        808        53        80.1      149\nhairpin.id_gga.fa.gz     FASTA        RNA        740        48        91.5      169\nhairpin.id_eca.fa.gz     FASTA        RNA        715        52        104.6     145\nhairpin.id_mtr.fa.gz     FASTA        RNA        672        54        165.3     910  Here, a CSV/TSV tool  csvtk \nis used to sort and view the result.    For human miRNA hairpins    Length distribution.\n  fakit fx2tab  could show extra information like sequence length, GC content.\n A distribution ploting script is used, (\n  plot_distribution.py  )  $ fakit fx2tab hairpin.id_hsa.fa.gz -l | cut -f 3  | plot_distribution.py -o hairpin.id_hsa.fa.gz.lendist.png", 
            "title": "Hairpins in different species"
        }, 
        {
            "location": "/tutorial/#bacteria-genome", 
            "text": "", 
            "title": "Bacteria genome"
        }, 
        {
            "location": "/tutorial/#dataset_1", 
            "text": "Pseudomonas aeruginosa PAO1 ,\nfiles:   Genbank file  PAO1.gb  Genome FASTA file  PAO1.fasta  GTF file  PAO1.gtf  was created with  extract_features_from_genbank_file.py , by extract_features_from_genbank_file.py  PAO1.gb -t . -f gtf   PAO1.gtf", 
            "title": "Dataset"
        }, 
        {
            "location": "/tutorial/#motif-distribution", 
            "text": "Motifs  $ cat motifs.fa GTAGCGS\nGTAGCGS GGWGKTCG\nGGWGKTCG    Sliding. Remember flag  --id-ncbi , do you?\n  By the way, do not be scared by the long flag  --circle-genome ,  --step \n  and so on. They have short ones,  -c ,  -s  $ fakit sliding --id-ncbi --circle-genome --step 20000 --window 200000 PAO1.fasta -o PAO1.fasta.sliding.fa\n\n$ fakit stat PAO1.fasta.sliding.fa\nfile                     seq_type    num_seqs    min_len    avg_len    max_len\nPAO1.fasta.sliding.fa         DNA         314    200,000    200,000    200,000    Locating motifs  $ fakit locate --id-ncbi --ignore-case --degenerate --pattern-file motifs.fa  PAO1.fasta.sliding.fa -o  PAO1.fasta.sliding.fa.motifs.tsv    Ploting distribution ( plot_motif_distribution.R )  # preproccess\n$ perl -ne 'if (/_sliding:(\\d+)-(\\d+)\\t(.+)/) {$loc= $1 + 100000; print \"$loc\\t$3\\n\";} else {print}' PAO1.fasta.sliding.fa.motifs.tsv    PAO1.fasta.sliding.fa.motifs.tsv2\n\n# plot\n$ ./plot_motif_distribution.R  Result", 
            "title": "Motif distribution"
        }, 
        {
            "location": "/tutorial/#find-multicopy-genes", 
            "text": "Get all CDS sequences  $ fakit subseq --id-ncbi --gtf PAO1.gtf --feature cds PAO1.fasta -o PAO1.cds.fasta\n\n$ fakit stat *.fasta\nfile              seq_type    num_seqs      min_len      avg_len      max_len\nPAO1.cds.fasta         DNA       5,572           72      1,003.8       16,884\nPAO1.fasta             DNA           1    6,264,404    6,264,404    6,264,404    Get duplicated sequences  $ fakit rmdup --by-seq --ignore-case PAO1.cds.fasta -o PAO1.cds.uniq.fasta --dup-seqs-file PAO1.cds.dup.fasta --dup-num-file PAO1.cds.dup.text\n\n$ cat PAO1.cds.dup.text\n6       NC_002516.2_500104:501120:-, NC_002516.2_2556948:2557964:+, NC_002516.2_3043750:3044766:-, NC_002516.2_3842274:3843290:-, NC_002516.2_4473623:4474639:+, NC_002516.2_5382796:5383812:-\n2       NC_002516.2_2073555:2075438:+, NC_002516.2_4716660:4718543:+\n2       NC_002516.2_2072935:2073558:+, NC_002516.2_4716040:4716663:+\n2       NC_002516.2_2075452:2076288:+, NC_002516.2_4718557:4719393:+", 
            "title": "Find multicopy genes"
        }, 
        {
            "location": "/tutorial/#flanking-sequences", 
            "text": "Get CDS and 1000 bp upstream sequence  $ fakit subseq --id-ncbi --gtf PAO1.gtf --feature cds PAO1.fasta --up-stream 1000    Get 1000 bp upstream sequence of CDS,  NOT  including CDS.  $ fakit subseq --id-ncbi --gtf PAO1.gtf --feature cds PAO1.fasta --up-stream 1000 --only-flank     \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Flanking sequences"
        }, 
        {
            "location": "/benchmark/", 
            "text": "Benchmark\n\n\nSoftwares\n\n\n\n\nfakit\n. (Go).\n   Version \nv0.2.5\n.\n\n\nfasta_utilities\n. (Perl).\n   Version \n3dcc0bc\n.\n   Lots of dependencies to install.\n\n\nfastx_toolkit\n. (Perl).\n   Version \n0.0.13\n.\n   Can't handle multi-line FASTA files.\n\n\nseqmagick\n. (Python).\n   Version 0.6.1\n\n\nseqtk\n. (C).\n   Version \n1.1-r92-dirty\n.\n\n\n\n\nNot used:\n\n\n\n\npyfaidx\n. (Python).\n   Version \n0.4.7.1\n. \nNot used, because it exhausted my memory (10G) when computing reverse-complement on a 5GB fasta file of 250 bp.\n\n\n\n\nA Python script \nmemusg\n was used\nto compute running time and peak memory usage of a process.\n\n\nFeatures\n\n\n\n\n\n\n\n\nFeatures\n\n\nfakit\n\n\nfasta_utilities\n\n\nfastx_toolkit\n\n\npyfaidx\n\n\nseqmagick\n\n\nseqtk\n\n\n\n\n\n\n\n\n\n\nCross-platform\n\n\nYes\n\n\nPartly\n\n\nPartly\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nMutli-line FASTA\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nRead FASTQ\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nMutli-line FASTQ\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nValidate bases\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\n\n\n\n\nRecognize RNA\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nRead STDIN\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nRead gzip\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nWrite gzip\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\nYes\n\n\n--\n\n\n\n\n\n\nSearch by motifs\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\n--\n\n\n\n\n\n\nSample seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nSubseq\n\n\nYes\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nDeduplicate seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\nPartly\n\n\n--\n\n\n\n\n\n\nSplit seqs\n\n\nYes\n\n\nYes\n\n\n--\n\n\nPartly\n\n\n--\n\n\n--\n\n\n\n\n\n\nSplit by seq\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\n\n\n\n\nShuffle seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n\n\n\n\nSort seqs\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\n--\n\n\n\n\n\n\nLocate motifs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n\n\n\n\nCommon seqs\n\n\nYes\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n--\n\n\n\n\n\n\nClean bases\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\n\n\n\n\nTranscribe\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nTranslate\n\n\n--\n\n\nYes\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n--\n\n\n\n\n\n\nSize select\n\n\nIndirect\n\n\nYes\n\n\n--\n\n\nYes\n\n\nYes\n\n\n--\n\n\n\n\n\n\nRename head\n\n\nYes\n\n\nYes\n\n\n--\n\n\n--\n\n\nYes\n\n\nYes\n\n\n\n\n\n\n\n\nDatasets\n\n\nAll test data is available here: \nfakit-benchmark-data.tar.gz\n  (1.7G)\n\n\ndataset_A.fa - large number of short sequences\n\n\nDataset A is reference genomes DNA sequences of gastrointestinal tract from\n\nNIH Human Microbiome Project\n:\n\nGastrointestinal_tract.nuc.fsa\n (FASTA format, ~2.7G).\n\n\ndataset_B.fa - small number of large sequences\n\n\nDataset B is Human genome from \nensembl\n.\n\n\n\n\nGenome DNA:  \nHomo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz\n (Gzipped FASTA file, ~900M)\n\n\nGTF file:  \nHomo_sapiens.GRCh38.84.gtf.gz\n (~44M)\n\n\nBED file: \nHomo_sapiens.GRCh38.84.bed.gz\n was converted from \nHomo_sapiens.GRCh38.84.gtf.gz\n by  \ngtf2bed\n  with command\n$ zcat Homo_sapiens.GRCh38.84.gtf.gz | gtf2bed --do-not-sort | gzip -c \n Homo_sapiens.GRCh38.84.bed.gz\n\n\n\n\n\n\n\nSummary\n\n\n$ fakit stat *.fa\nfile           seq_format   seq_type   num_seqs   min_len        avg_len       max_len\ndataset_A.fa   FASTA        DNA          67,748        56       41,442.5     5,976,145\ndataset_B.fa   FASTA        DNA             194       970   15,978,096.5   248,956,422\n\n\n\nSequence ID list\n\n\nParts of sequences IDs was sampled and shuffled from original data.\nThey were used in test of extracting sequences by ID list.\n\n\nCommands:\n\n\n$ fakit sample -p 0.3 dataset_A.fa | fakit seq --name --only-id | shuf \n ids_A.txt\n$ fakit sample -p 0.3 dataset_B.fa | fakit seq --name --only-id | shuf \n ids_B.txt\n\n\n\nNumbers:\n\n\n$ wc -l ids_*\n20138 ids_A.txt\n   58 ids_B.txt\n\n\n\nBED file\n\n\nOnly BED data of chromosome 19 was used in test of subsequence with BED file:\n\n\n$ zcat Homo_sapiens.GRCh38.84.bed.gz | grep -E \"^19\" | gzip -c \n chr19.bed.gz\n\n\n\nPlatform\n\n\nPC:\n\n\n\n\nCPU: Intel Core i5-3320M @ 2.60GHz, two cores/4 threads\n\n\nRAM: DDR3 1600MHz, 12GB\n\n\nSSD: SAMSUNG 850 EVO 250G, SATA-3\n\n\nOS: Fedora 23 (Scientific KDE spin),  Kernal: 4.5.6-200.fc23.x86_64\n\n\n\n\nSoftwares:\n\n\n\n\nPerl: perl 5, version 22, subversion 1 (v5.22.1) built for x86_64-linux-thread-multi\n\n\nPython: Python 2.7.10 (default, Sep  8 2015, 17:20:17) [GCC 5.1.1 20150618 (Red Hat 5.1.1-4)] on linux2\n\n\n\n\nTests\n\n\nAutomatic benchmark and plotting scripts are available at:  \nhttps://github.com/shenwei356/fakit/tree/master/benchmark\n.\n\n\nAll tests were repeated 3 times ( ~20 min for one time),\nand average time and peak memory ware used for plotting.\n\n\nAll data were readed once before tests began to minimize the influence of page cache.\n\n\nTest 1. Reverse Complement\n\n\nOutput sequences of all Softwares were not wrapped to fixed length.\n\n\nrevcom_biogo\n (\nsource\n,\n \nbinary\n ),\n a tool written in Golang using \nbiogo\n package,\n was also used for comparison of FASTA file parsing performance.\n\n\nCommands\n\n\nTest 2. Extracting sequences by ID list\n\n\nCommands\n\n\nTest 3. Sampling by number\n\n\nNote that different softwares have different sampling strategies,\nthe peak memory may depends on size of sampled sequences.\n\n\nCommands\n\n\nTest 4. Removing duplicates by sequence content\n\n\nCommands\n\n\nTest 5. Subsequence with BED file\n\n\nCommands\n\n\nResults\n\n\nfakit version: v0.2.5\n\n\n\n\nTest of multiple threads:\n\n\nFrom the results, 2 threads/CPU is enough, so the default threads of fakit is 2.\n\n\n\n\nTests on different file sizes\n\n\nFiles are generated by replicating Human genome chr1 for N times.\n\n\n\n\n\n\n\n\n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();\n\n\n\n\nPlease enable JavaScript to view the \ncomments powered by Disqus.", 
            "title": "Benchmark"
        }, 
        {
            "location": "/benchmark/#benchmark", 
            "text": "", 
            "title": "Benchmark"
        }, 
        {
            "location": "/benchmark/#softwares", 
            "text": "fakit . (Go).\n   Version  v0.2.5 .  fasta_utilities . (Perl).\n   Version  3dcc0bc .\n   Lots of dependencies to install.  fastx_toolkit . (Perl).\n   Version  0.0.13 .\n   Can't handle multi-line FASTA files.  seqmagick . (Python).\n   Version 0.6.1  seqtk . (C).\n   Version  1.1-r92-dirty .   Not used:   pyfaidx . (Python).\n   Version  0.4.7.1 .  Not used, because it exhausted my memory (10G) when computing reverse-complement on a 5GB fasta file of 250 bp.   A Python script  memusg  was used\nto compute running time and peak memory usage of a process.", 
            "title": "Softwares"
        }, 
        {
            "location": "/benchmark/#features", 
            "text": "Features  fakit  fasta_utilities  fastx_toolkit  pyfaidx  seqmagick  seqtk      Cross-platform  Yes  Partly  Partly  Yes  Yes  Yes    Mutli-line FASTA  Yes  Yes  --  Yes  Yes  Yes    Read FASTQ  Yes  Yes  Yes  --  Yes  Yes    Mutli-line FASTQ  Yes  Yes  --  --  Yes  Yes    Validate bases  Yes  --  Yes  Yes  --  --    Recognize RNA  Yes  Yes  --  --  Yes  Yes    Read STDIN  Yes  Yes  Yes  --  Yes  Yes    Read gzip  Yes  Yes  --  --  Yes  Yes    Write gzip  Yes  --  --  --  Yes  --    Search by motifs  Yes  Yes  --  --  Yes  --    Sample seqs  Yes  --  --  --  Yes  Yes    Subseq  Yes  Yes  --  Yes  Yes  Yes    Deduplicate seqs  Yes  --  --  --  Partly  --    Split seqs  Yes  Yes  --  Partly  --  --    Split by seq  Yes  --  Yes  Yes  --  --    Shuffle seqs  Yes  --  --  --  --  --    Sort seqs  Yes  Yes  --  --  Yes  --    Locate motifs  Yes  --  --  --  --  --    Common seqs  Yes  --  --  --  --  --    Clean bases  Yes  Yes  Yes  Yes  --  --    Transcribe  Yes  Yes  Yes  Yes  Yes  Yes    Translate  --  Yes  Yes  Yes  Yes  --    Size select  Indirect  Yes  --  Yes  Yes  --    Rename head  Yes  Yes  --  --  Yes  Yes", 
            "title": "Features"
        }, 
        {
            "location": "/benchmark/#datasets", 
            "text": "All test data is available here:  fakit-benchmark-data.tar.gz   (1.7G)", 
            "title": "Datasets"
        }, 
        {
            "location": "/benchmark/#dataset_afa-large-number-of-short-sequences", 
            "text": "Dataset A is reference genomes DNA sequences of gastrointestinal tract from NIH Human Microbiome Project : Gastrointestinal_tract.nuc.fsa  (FASTA format, ~2.7G).", 
            "title": "dataset_A.fa - large number of short sequences"
        }, 
        {
            "location": "/benchmark/#dataset_bfa-small-number-of-large-sequences", 
            "text": "Dataset B is Human genome from  ensembl .   Genome DNA:   Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz  (Gzipped FASTA file, ~900M)  GTF file:   Homo_sapiens.GRCh38.84.gtf.gz  (~44M)  BED file:  Homo_sapiens.GRCh38.84.bed.gz  was converted from  Homo_sapiens.GRCh38.84.gtf.gz  by   gtf2bed   with command $ zcat Homo_sapiens.GRCh38.84.gtf.gz | gtf2bed --do-not-sort | gzip -c   Homo_sapiens.GRCh38.84.bed.gz    Summary  $ fakit stat *.fa\nfile           seq_format   seq_type   num_seqs   min_len        avg_len       max_len\ndataset_A.fa   FASTA        DNA          67,748        56       41,442.5     5,976,145\ndataset_B.fa   FASTA        DNA             194       970   15,978,096.5   248,956,422", 
            "title": "dataset_B.fa - small number of large sequences"
        }, 
        {
            "location": "/benchmark/#sequence-id-list", 
            "text": "Parts of sequences IDs was sampled and shuffled from original data.\nThey were used in test of extracting sequences by ID list.  Commands:  $ fakit sample -p 0.3 dataset_A.fa | fakit seq --name --only-id | shuf   ids_A.txt\n$ fakit sample -p 0.3 dataset_B.fa | fakit seq --name --only-id | shuf   ids_B.txt  Numbers:  $ wc -l ids_*\n20138 ids_A.txt\n   58 ids_B.txt", 
            "title": "Sequence ID list"
        }, 
        {
            "location": "/benchmark/#bed-file", 
            "text": "Only BED data of chromosome 19 was used in test of subsequence with BED file:  $ zcat Homo_sapiens.GRCh38.84.bed.gz | grep -E \"^19\" | gzip -c   chr19.bed.gz", 
            "title": "BED file"
        }, 
        {
            "location": "/benchmark/#platform", 
            "text": "PC:   CPU: Intel Core i5-3320M @ 2.60GHz, two cores/4 threads  RAM: DDR3 1600MHz, 12GB  SSD: SAMSUNG 850 EVO 250G, SATA-3  OS: Fedora 23 (Scientific KDE spin),  Kernal: 4.5.6-200.fc23.x86_64   Softwares:   Perl: perl 5, version 22, subversion 1 (v5.22.1) built for x86_64-linux-thread-multi  Python: Python 2.7.10 (default, Sep  8 2015, 17:20:17) [GCC 5.1.1 20150618 (Red Hat 5.1.1-4)] on linux2", 
            "title": "Platform"
        }, 
        {
            "location": "/benchmark/#tests", 
            "text": "Automatic benchmark and plotting scripts are available at:   https://github.com/shenwei356/fakit/tree/master/benchmark .  All tests were repeated 3 times ( ~20 min for one time),\nand average time and peak memory ware used for plotting.  All data were readed once before tests began to minimize the influence of page cache.", 
            "title": "Tests"
        }, 
        {
            "location": "/benchmark/#test-1-reverse-complement", 
            "text": "Output sequences of all Softwares were not wrapped to fixed length.  revcom_biogo  ( source ,\n  binary  ),\n a tool written in Golang using  biogo  package,\n was also used for comparison of FASTA file parsing performance.  Commands", 
            "title": "Test 1. Reverse Complement"
        }, 
        {
            "location": "/benchmark/#test-2-extracting-sequences-by-id-list", 
            "text": "Commands", 
            "title": "Test 2. Extracting sequences by ID list"
        }, 
        {
            "location": "/benchmark/#test-3-sampling-by-number", 
            "text": "Note that different softwares have different sampling strategies,\nthe peak memory may depends on size of sampled sequences.  Commands", 
            "title": "Test 3. Sampling by number"
        }, 
        {
            "location": "/benchmark/#test-4-removing-duplicates-by-sequence-content", 
            "text": "Commands", 
            "title": "Test 4. Removing duplicates by sequence content"
        }, 
        {
            "location": "/benchmark/#test-5-subsequence-with-bed-file", 
            "text": "Commands", 
            "title": "Test 5. Subsequence with BED file"
        }, 
        {
            "location": "/benchmark/#results", 
            "text": "fakit version: v0.2.5", 
            "title": "Results"
        }, 
        {
            "location": "/benchmark/#test-of-multiple-threads", 
            "text": "From the results, 2 threads/CPU is enough, so the default threads of fakit is 2.", 
            "title": "Test of multiple threads:"
        }, 
        {
            "location": "/benchmark/#tests-on-different-file-sizes", 
            "text": "Files are generated by replicating Human genome chr1 for N times.    \n/**\n* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables\n*/\n/*\nvar disqus_config = function () {\nthis.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable\nthis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n};\n*/\n(function() { // DON'T EDIT BELOW THIS LINE\nvar d = document, s = d.createElement('script');\n\ns.src = '//fastakit.disqus.com/embed.js';\n\ns.setAttribute('data-timestamp', +new Date());\n(d.head || d.body).appendChild(s);\n})();  Please enable JavaScript to view the  comments powered by Disqus.", 
            "title": "Tests on different file sizes"
        }
    ]
}