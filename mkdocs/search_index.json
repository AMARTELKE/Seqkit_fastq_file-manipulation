{
    "docs": [
        {
            "location": "/", 
            "text": "fakit - FASTA kit\n\n\nDocuments  : \nhttp://shenwei356.github.io/fakit\n\n\nSource code: \nhttps://github.com/shenwei356/fakit\n\n\nFeatures\n\n\n\n\nCross-platform (Linux/Windows/Mac OS X/OpenBSD/FreeBSD,\n  see \ndownload\n)\n\n\nOut-of-the-box, no dependencies, without compilation, light weight\n  see \ndownload\n)\n\n\nFast (see benchmark)\n\n\nPractical functions (see subcommands and\n  \nexamples\n )\n\n\nSupport STDIN and gziped input/output file, could be used in pipe\n\n\nSupport custom sequence ID regular expression (especially useful for quering with ID list)\n\n\nReproducible results (configurable rand seed in \nsample\n and \nshuffle\n)\n\n\n\n\nSubcommands\n\n\nBasic\n\n\n\n\nseq\n        transform sequence (revserse, complement, extract ID...)\n\n\nsubseq\n     get subsequence by region\n\n\nstat\n       simple statistics of FASTA files\n\n\n\n\nFormat convert\n\n\n\n\nfa2tab\n     covert FASTA to tabular format, and provide various information\n\n\ntab2fa\n     covert tabular format to FASTA format\n\n\n\n\nMore\n\n\n\n\nextract\n    extract sequences by pattern(s) of name or sequence motifs\n\n\ncommon\n     find common sequences of multiple files by id/name/sequence\n\n\nrmdup\n      remove duplicated sequences by id/name/sequence\n\n\nsplit\n      split sequences into files by id/seq region/size/parts\n\n\nsample\n     sample sequences by number or proportion\n\n\nshuffle\n    shuffle sequences\n\n\nlocate\n     locate subsequences/motifs\n\n\nsliding\n    sliding sequences, circle genome supported\n\n\n\n\nGlobal Flags\n\n\n-c, --chunk-size int     chunk size (attention: unit is FASTA records not lines) (default 1000)\n    --id-regexp string   regular expression for parsing ID (default \n^([^\\\\s]+)\\\\s?\n)\n-w, --line-width int     line width (0 for no wrap) (default 60)\n-o, --out-file string    out file (\n-\n for stdout, suffix .gz for gzipped out) (default \n-\n)\n    --quiet              be quiet and do not show extra information\n-t, --seq-type string    sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default \nauto\n)\n-j, --threads int        number of CPUs (default value depends on your device) (default 4)\n\n\n\n\nUsage \n Examples\n\n\nhttp://shenwei356.github.io/fakit/usage/\n\n\nBenchmark\n\n\nTODO\n\n\nContact\n\n\nEmail me for any problem when using fakit. shenwei356(at)gmail.com\n\n\nCreate an issue\n to report bugs,\npropose new functions or ask for help.\n\n\nLicense\n\n\nMIT License\n\n\nSimilar tools\n\n\n\n\nfastx_toolkit\n\n\nseqtk\n\n\npyfaidx\n\n\nfqtools\n\n\nfasta_utilities\n\n\nseqmagick", 
            "title": "Home"
        }, 
        {
            "location": "/#fakit-fasta-kit", 
            "text": "Documents  :  http://shenwei356.github.io/fakit  Source code:  https://github.com/shenwei356/fakit", 
            "title": "fakit - FASTA kit"
        }, 
        {
            "location": "/#features", 
            "text": "Cross-platform (Linux/Windows/Mac OS X/OpenBSD/FreeBSD,\n  see  download )  Out-of-the-box, no dependencies, without compilation, light weight\n  see  download )  Fast (see benchmark)  Practical functions (see subcommands and\n   examples  )  Support STDIN and gziped input/output file, could be used in pipe  Support custom sequence ID regular expression (especially useful for quering with ID list)  Reproducible results (configurable rand seed in  sample  and  shuffle )", 
            "title": "Features"
        }, 
        {
            "location": "/#subcommands", 
            "text": "Basic   seq         transform sequence (revserse, complement, extract ID...)  subseq      get subsequence by region  stat        simple statistics of FASTA files   Format convert   fa2tab      covert FASTA to tabular format, and provide various information  tab2fa      covert tabular format to FASTA format   More   extract     extract sequences by pattern(s) of name or sequence motifs  common      find common sequences of multiple files by id/name/sequence  rmdup       remove duplicated sequences by id/name/sequence  split       split sequences into files by id/seq region/size/parts  sample      sample sequences by number or proportion  shuffle     shuffle sequences  locate      locate subsequences/motifs  sliding     sliding sequences, circle genome supported   Global Flags  -c, --chunk-size int     chunk size (attention: unit is FASTA records not lines) (default 1000)\n    --id-regexp string   regular expression for parsing ID (default  ^([^\\\\s]+)\\\\s? )\n-w, --line-width int     line width (0 for no wrap) (default 60)\n-o, --out-file string    out file ( -  for stdout, suffix .gz for gzipped out) (default  - )\n    --quiet              be quiet and do not show extra information\n-t, --seq-type string    sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default  auto )\n-j, --threads int        number of CPUs (default value depends on your device) (default 4)", 
            "title": "Subcommands"
        }, 
        {
            "location": "/#usage-examples", 
            "text": "http://shenwei356.github.io/fakit/usage/", 
            "title": "Usage &amp;&amp; Examples"
        }, 
        {
            "location": "/#benchmark", 
            "text": "TODO", 
            "title": "Benchmark"
        }, 
        {
            "location": "/#contact", 
            "text": "Email me for any problem when using fakit. shenwei356(at)gmail.com  Create an issue  to report bugs,\npropose new functions or ask for help.", 
            "title": "Contact"
        }, 
        {
            "location": "/#license", 
            "text": "MIT License", 
            "title": "License"
        }, 
        {
            "location": "/#similar-tools", 
            "text": "fastx_toolkit  seqtk  pyfaidx  fqtools  fasta_utilities  seqmagick", 
            "title": "Similar tools"
        }, 
        {
            "location": "/download/", 
            "text": "Download\n\n\nfakit\n is implemented in \nGolang\n programming language,\n executable binary files for most popular operating system are freely available\n  in \nrelease\n page.\n\n\nCurrent Version\n\n\nfakit v0.1.1\n\n\nInstallation\n\n\nJust \ndownload\n executable file\n of your operating system and rename it to \nfakit.exe\n (Windows) or\n \nfakit\n (other operating systems) for convenience,\n and then run it in command-line interface, no dependencies,\n without complicated compilation process.\n\n\nYou can also add the directory of the executable file to environment variable\n\nPATH\n, so you can run \nfakit\n anywhere.\n\n\n\n\n\n\nFor windows, the simplest way is copy it to \nC:\\WINDOWS\\system32\n.\n\n\n\n\n\n\nFor Linux, type:\n\n\nchmod a+x /PATH/OF/FASTCOV/fakit\necho export PATH=\\$PATH:/PATH/OF/FASTCOV \n ~/.bashrc\n\n\n\nor simply copy it to \n/usr/local/bin\n\n\n\n\n\n\nPrevious Versions\n\n\nfakit v0.1", 
            "title": "Download"
        }, 
        {
            "location": "/download/#download", 
            "text": "fakit  is implemented in  Golang  programming language,\n executable binary files for most popular operating system are freely available\n  in  release  page.", 
            "title": "Download"
        }, 
        {
            "location": "/download/#current-version", 
            "text": "fakit v0.1.1", 
            "title": "Current Version"
        }, 
        {
            "location": "/download/#installation", 
            "text": "Just  download  executable file\n of your operating system and rename it to  fakit.exe  (Windows) or\n  fakit  (other operating systems) for convenience,\n and then run it in command-line interface, no dependencies,\n without complicated compilation process.  You can also add the directory of the executable file to environment variable PATH , so you can run  fakit  anywhere.    For windows, the simplest way is copy it to  C:\\WINDOWS\\system32 .    For Linux, type:  chmod a+x /PATH/OF/FASTCOV/fakit\necho export PATH=\\$PATH:/PATH/OF/FASTCOV   ~/.bashrc  or simply copy it to  /usr/local/bin", 
            "title": "Installation"
        }, 
        {
            "location": "/download/#previous-versions", 
            "text": "fakit v0.1", 
            "title": "Previous Versions"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage and Examples\n\n\nfakit\n\n\nUsage\n\n\nfakit -- FASTA kit\n\nVersion: 0.1.1\n\nAuthor: Wei Shen \nshenwei356@gmail.com\n\n\nDocuments  : http://shenwei356.github.io/fakit\nSource code: https://github.com/shenwei356/fakit\n\nUsage:\n  fakit [command]\n\nAvailable Commands:\n  common      find common sequences of multiple files by id/name/sequence\n  extract     extract sequences by pattern(s) of name or sequence motifs\n  fa2tab      covert FASTA to tabular format, and provide various information\n  locate      locate subsequences/motifs\n  rmdup       remove duplicated sequences by id/name/sequence\n  sample      sample sequences by number or proportion\n  seq         transform sequence (revserse, complement, extract ID...)\n  shuffle     shuffle sequences\n  sliding     sliding sequences, circle genome supported\n  split       split sequences into files by id/seq region/size/parts\n  stat        simple statistics of FASTA files\n  subseq      get subsequence by region\n  tab2fa      covert tabular format to FASTA format\n\nFlags:\n  -c, --chunk-size int     chunk size (attention: unit is FASTA records not lines) (default 100)\n      --id-regexp string   regular expression for parsing ID (default \n^([^\\\\s]+)\\\\s?\n)\n  -w, --line-width int     line width (0 for no wrap) (default 60)\n  -o, --out-file string    out file (\n-\n for stdout, suffix .gz for gzipped out) (default \n-\n)\n      --quiet              be quiet and do not show extra information\n  -t, --seq-type string    sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default \nauto\n)\n  -j, --threads int        number of CPUs. since most of the subcommands are I/O intensive, so default value is 1. For computation intensive jobs, like extract and locate, you may set bigger value (default 1)\n\nUse \nfakit [command] --help\n for more information about a command.\n\n\n\n\nPerformance Tips\n\n\nSince most of the subcommands are I/O intensive,\nso default value of flag -j (--threads) is 1.\nFor computation intensive jobs, like extract and locate,\n you may set a bigger value.\n\n\nFor example\n\n\n\n\n\n\nExtract sequences by names or sequences using regular expression.\n\n\nzcat hairpin.fa.gz | fakit extract -s -r -i -p TT[CG]AA -j 4\n\n\n\n\n\n\n\nLocate sequence motifs\n\n\nzcat hairpin.fa.gz | fakit extract -s -d -i -f motif.fa -j 4\n\n\n\n\n\n\n\nDatasets\n\n\nDatasets are from \nThe miRBase Sequence Database -- Release 21\n\n\n\n\nhairpin.fa.gz\n\n\nmature.fa.gz\n\n\nmiRNA.diff.gz\n\n\n\n\nseq\n\n\nUsage\n\n\ntransform sequence (revserse, complement, extract ID...)\n\nUsage:\n  fakit seq [flags]\n\nFlags:\n  -p, --complement          complement sequence (blank for Protein sequence)\n  -G, --gap-letter string   gap letters (default \n-\n)\n  -l, --lower-case          print sequences in lower case\n  -n, --name                only print names\n  -i, --only-id             print ID instead of full head\n  -g, --remove-gaps         remove gaps\n  -r, --reverse             reverse sequence)\n  -s, --seq                 only print sequences\n  -u, --upper-case          print sequences in upper case\n\n\n\n\nExamples\n\n\n\n\n\n\nRead and print\n\n\n\n\n\n\nFrom file:\n\n\n$ fakit seq hairpin.fa.gz\n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAAC\nUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\n\n\n\n\n\n\n\nFrom stdin:\n\n\nzcat hairpin.fa.gz | fakit seq\n\n\n\n\n\n\n\n\n\n\n\nOnly print names\n\n\n\n\n\n\nFull name:\n\n\n$ fakit seq hairpin.fa.gz -n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop\n\n\n\n\n\n\n\nOnly ID:\n\n\n$ fakit seq hairpin.fa.gz -n -i\ncel-let-7\ncel-lin-4\ncel-mir-1\n\n\n\n\n\n\n\nCustom ID region by regular expression (this could be applied to all subcommands):\n\n\n$ fakit seq hairpin.fa.gz -n -i --id-regexp \"^[^\\s]+\\s([^\\s]+)\\s\"\nMI0000001\nMI0000002\nMI0000003\n\n\n\n\n\n\n\n\n\n\n\nOnly print seq (global flag -w defines the output line width, 0 for no wrap)\n\n\n$ fakit seq hairpin.fa.gz -s -w 0\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\nAUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU\nAAAGUGACCGUACCGAGCUGCAUACUUCCUUACAUGCCCAUACUAUAUCAUAAAUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAGU\n\n\n\n\n\n\n\nReverse comlement sequence\n\n\n$ fakit seq hairpin.fa.gz -r -p\n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUCGAAGAGUUCUGUCUCCGGUAAGGUAGAAAAUUGCAUAGUUCACCGGUGGUAAUAUUCC\nAAACUAUACAACCUACUACCUCACCGGAUCCACAGUGUA\n\n\n\n\n\n\n\nRemove gaps and to lower/upper case\n\n\n$ echo -e \"\nseq\\nACGT-ACTGC-ACC\" | fakit seq -i -g\n\nseq\nACGTACTGCACC\n\n\n\n\n\n\n\nsubseq\n\n\nUsage\n\n\nget subsequence by region.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 0-based index    0 1 2 3 4 5 6 7 8 9\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4        G T N\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit subseq [flags]\n\nFlags:\n  -r, --region string   subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases, 13:-1 for cutting first 12 bases. type \nfakit subseq -h\n for more examples\n\n\n\n\nExamples\n\n\n\n\n\n\nfirst 12 bases\n\n\n$ zcat hairpin.fa.gz | fakit subseq -r 1:12\n\n\n\n\n\n\n\nlast 12 bases\n\n\n$ zcat hairpin.fa.gz | fakit subseq -r -12:-1\n\n\n\n\n\n\n\nsubsequence without first and last 12 bases\n\n\n$ zcat hairpin.fa.gz | fakit subseq -r 13:-13\n\n\n\n\n\n\n\nstat\n\n\nUsage\n\n\nsimple statistics of FASTA files\n\nUsage:\n  fakit stat [flags]\n\n\n\n\nEexamples\n\n\n\n\nGeneral use\n$ fakit stat *.fa.gz\nfile    type    num_seqs        min_len avg_len max_len\nhairpin.fa.gz   RNA     28645   39      103.0   2354\nmature.fa.gz    RNA     35828   15      21.8    34\n\n\n\n\n\n\n\nfa2tab \n fa2tab\n\n\nUsage (fa2tab)\n\n\ncovert FASTA to tabular format, and provide various information,\nlike sequence length, GC content/GC skew.\n\nUsage:\n  fakit fa2tab [flags]\n\nFlags:\n  -b, --base-content value   print base content. (case ignored, multiple values supported) e.g. -b AT -b N (default [])\n  -g, --gc                   print GC content\n  -G, --gc-skew              print GC-Skew\n  -l, --length               print sequence length\n  -n, --name                 only print names (no sequences)\n  -i, --only-id              print ID instead of full head\n  -T, --title                print title line\n\n\n\n\n\nUsage (tab2fa)\n\n\ncovert tabular format (first two columns) to FASTA format\n\nUsage:\n  fakit tab2fa [flags]\n\nFlags:\n  -p, --comment-line-prefix value   comment line prefix (default [#,//])\n\n\n\n\nExamples\n\n\n\n\n\n\nDefault output\n\n\n$ fakit fa2tab hairpin.fa.gz\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop      UACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop      AAAGUGACCGUACCGAGCUGCAUACUUCCUUACAUGCCCAUACUAUAUCAUAAAUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAGU\n\n\n\n\n\n\n\nPrint sequence length, GC content, and only print names (no sequences),\nwe could also print title line by flag \n-T\n.\n\n\n$ fakit fa2tab hairpin.fa.gz -i -l -g -n -T\n# name  seq     length  GC\ncel-let-7               99      43.43\ncel-lin-4               94      54.26\ncel-mir-1               96      40.62\n\n\n\n\n\n\n\nUse fa2tab and tab2fa in pipe\n\n\n$ zcat hairpin.fa.gz | fakit fa2tab | fakit tab2fa\n\n\n\n\n\n\n\nSort sequences by length\n\n\n$ zcat hairpin.fa.gz | fakit fa2tab -l | sort -t\"`echo -e '\\t'`\" -n -k3,3 | fakit tab2fa\n\ncin-mir-4129 MI0015684 Ciona intestinalis miR-4129 stem-loop\nUUCGUUAUUGGAAGACCUUAGUCCGUUAAUAAAGGCAUC\n\nmmu-mir-7228 MI0023723 Mus musculus miR-7228 stem-loop\nUGGCGACCUGAACAGAUGUCGCAGUGUUCGGUCUCCAGU\n\ncin-mir-4103 MI0015657 Ciona intestinalis miR-4103 stem-loop\nACCACGGGUCUGUGACGUAGCAGCGCUGCGGGUCCGCUGU\n\n\n\nSorting or filtering by GC (or other base by -flag \n-b\n) content could also achieved in similar way.\n\n\n\n\n\n\nGet first 1000 sequence\n\n\n$ zcat hairpin.fa.gz | fakit fa2tab | head -n 1000 | fakit tab2fa\n\n\n\n\n\n\n\nextract\n\n\nUsage\n\n\nextract sequences by pattern(s) of name or sequence motifs\n\nUsage:\n  fakit extract [flags]\n\nFlags:\n  -n, --by-name               match by full name instead of just id\n  -s, --by-seq                match by seq\n  -d, --degenerate            pattern/motif contains degenerate base\n      --delete-matched        delete matched pattern to speedup\n  -i, --ignore-case           ignore case\n  -v, --invert-match          invert the sense of matching, to select non-matching records\n  -p, --pattern value         search pattern (multiple values supported) (default [])\n  -f, --pattern-file string   pattern file\n  -r, --use-regexp            patterns are regular expression\n\n\n\n\nExamples\n\n\n\n\n\n\nExtract human hairpins (i.e. sequences with name starting with \nhsa\n)\n\n\n$ zcat hairpin.fa.gz | fakit extract -r -p ^hsa\n\nhsa-let-7a-1 MI0000060 Homo sapiens let-7a-1 stem-loop\nUGGGAUGAGGUAGUAGGUUGUAUAGUUUUAGGGUCACACCCACCACUGGGAGAUAACUAU\nACAAUCUACUGUCUUUCCUA\n\nhsa-let-7a-2 MI0000061 Homo sapiens let-7a-2 stem-loop\nAGGUUGAGGUAGUAGGUUGUAUAGUUUAGAAUUACAUCAAGGGAGAUAACUGUACAGCCU\nCCUAGCUUUCCU\n\n\n\n\n\n\n\nRemove human and mice hairpins.\n\n\n$ zcat hairpin.fa.gz | fakit extract -r -p ^hsa -p ^mmu -v\n\n\n\n\n\n\n\nExtract new entries by information from miRNA.diff.gz\n\n\n\n\n\n\nGet IDs of new entries.\n\n\n$ zcat miRNA.diff.gz | grep ^# -v | grep NEW | cut -f 2 \n list\n$ more list\ncfa-mir-486\ncfa-mir-339-1\npmi-let-7\n\n\n\n\n\n\n\nExtract by ID list file\n\n\n$ zcat hairpin.fa.gz | fakit extract -f list \n new.fa\n\n\n\n\n\n\n\n\n\n\n\nExtract sequences starting with AGGCG\n\n\n$ zcat hairpin.fa.gz | fakit extract -s -r -i -p ^aggcg -j 4\n\n\n\n\n\n\n\nExtract sequences with TTSAA (AgsI digest site) in SEQUENCE. Base S stands for C or G.\n\n\n$ zcat hairpin.fa.gz | fakit extract -s -d -i -p TTSAA -j 4\n\n\n\nIt's equal to but simpler than:\n\n\n$ zcat hairpin.fa.gz | fakit extract -s -r -i -p TT[CG]AA\n\n\n\n\n\n\n\ncommon\n\n\nUsage\n\n\nfind common sequences of multiple files by id/name/sequence\n\nUsage:\n  fakit common [flags]\n\nFlags:\n  -n, --by-name       match by full name instead of just id\n  -s, --by-seq        match by sequence\n  -i, --ignore-case   ignore case\n\n\n\n\nExamples\n\n\n\n\n\n\nBy ID (default)\n\n\nfakit common file*.fa \n common.fasta\n\n\n\n\n\n\n\nBy full name\n\n\nfakit common file*.fa -n \n common.fasta\n\n\n\n\n\n\n\nBy sequence\n\n\nfakit common file*.fa -s \n common.fasta\n\n\n\n\n\n\n\nrmdup\n\n\nUsage\n\n\nremove duplicated sequences by id/name/sequence\n\nUsage:\n  fakit rmdup [flags]\n\nFlags:\n  -n, --by-name       by full name instead of just id\n  -s, --by-seq        by seq\n  -i, --ignore-case   ignore case\n\n\n\n\nExamples\n\n\nSimilar to \ncommon\n.\n\n\n\n\nGeneral use\n$ zcat hairpin.fa.gz | fakit rmdup -s -o clean.fa.gz\n[INFO] 2226 duplicated records removed\n\n\n\n\n\n\n\nsplit\n\n\nUsage\n\n\nsplit sequences into files by name ID, subsequence of given region,\npart size or number of parts.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 0-based index    0 1 2 3 4 5 6 7 8 9\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4        G T N\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit split [flags]\n\nFlags:\n  -i, --by-id              split squences according to sequence ID\n  -p, --by-part int        split squences into N parts\n  -r, --by-region string   split squences according to subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases. type \nfakit split -h\n for more example\n  -s, --by-size int        split squences into multi parts with N sequences\n  -d, --dry-run            dry run, just print message and no files will be created.\n  -m, --md5                use MD5 instead of region sequence in output file when using flag -r (--by-region)\n  -2, --two-pass           2-pass mode read files twice to lower memory usage. Not allowed when reading from stdin\n\n\n\n\nExamples\n\n\n\n\n\n\nSplit sequences into parts with at most 10000 sequences\n\n\n$ fakit split hairpin.fa.gz -s 10000\n[INFO] split into 10000 seqs per file\n[INFO] write 10000 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 10000 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 8645 sequences to file: hairpin.fa.part_003.gz\n\n\n\n\n\n\n\nSplit sequences into 4 parts\n\n\n$ fakit split hairpin.fa.gz -p 4\n[INFO] split into 4 parts\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 7162 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_003.gz\n[INFO] write 7159 sequences to file: hairpin.fa.part_004.gz\n\n\n\nTo reduce memory usage when spliting big file, we could use flag \n--two-pass\n\n\n$ fakit split hairpin.fa.gz -p 4 -2\n[INFO] split into 4 parts\n[INFO] first pass: get seq number\n[INFO] seq number: 28645\n[INFO] second pass: read and split\n[INFO] write 7162 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_003.gz\n[INFO] write 7159 sequences to file: hairpin.fa.part_004.gz\n\n\n\n\n\n\n\nSplit sequences by species. i.e. by custom IDs (first three letters)\n\n\n$ fakit split hairpin.fa.gz -i --id-regexp \"^([\\w]+)\\-\"\n[INFO] split by ID. idRegexp: ^([\\w]+)\\-\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 97 sequences to file: hairpin.fa.id_asu.gz\n[INFO] write 267 sequences to file: hairpin.fa.id_chi.gz\n[INFO] write 296 sequences to file: hairpin.fa.id_gra.gz\n...\n\n\n\n\n\n\n\nSplit sequences by sequence region (for example, sequence barcode)\n\n\n$ fakit split hairpin.fa.gz -r 1:12\n[INFO] split by region: ^([^\\s]+)\\s?\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 1 sequences to file: hairpin.fa.region_1:12_UGUUUGCUCAGC.gz\n[INFO] write 1 sequences to file: hairpin.fa.region_1:12_GAAGAAGAAGAC.gz\n[INFO] write 4 sequences to file: hairpin.fa.region_1:12_UGAGUGUAGUGC.gz\n\n\n\nIf region is too long, we could use falg \n-m\n, i.e. use MD5 instead of region sequence in output file.\n\n\nSequence suffix could be defined as \n-r -12:-1\n\n\n\n\n\n\nsample\n\n\nUsage\n\n\nsample sequences by number or proportion.\n\nUsage:\n  fakit sample [flags]\n\nFlags:\n  -n, --number int         sample by number (result may not exactly match)\n  -p, --proportion float   sample by proportion\n  -s, --rand-seed int      rand seed for shuffle (default 11)\n  -2, --two-pass           2-pass mode read files twice to lower memory usage. Not allowed when reading from stdin\n\n\n\n\nExamples\n\n\n\n\n\n\nSample by number\n\n\n$ zcat hairpin.fa.gz | fakit sample -n 1000 -o sample.fa.gz\n[INFO] sample by number\n[INFO] 949 sequences outputed\n\n\n\nTo reduce memory usage when spliting big file, we could use flag \n--two-pass\n\n\n\n\n\n\nSample by proportion\n\n\n$ zcat hairpin.fa.gz | fakit sample -p 0.1 -o sample.fa.gz\n[INFO] sample by proportion\n[INFO] 2814 sequences outputed\n\n\n\n\n\n\n\nSet rand seed to reproduce the result\n\n\n$ zcat hairpin.fa.gz | fakit sample -p 0.1 -s 11\n\n\n\n\n\n\n\nMost of the time, we could shuffle after sampling\n\n\n$ zcat hairpin.fa.gz | fakit sample -p 0.1 | fakit shuffle -o sample.fa.gz\n\n\n\n\n\n\n\nshuffle\n\n\nUsage\n\n\nshuffle sequences\n\nUsage:\n  fakit shuffle [flags]\n\nFlags:\n  -s, --rand-seed int   rand seed for shuffle (default 23)\n\n\n\n\nExamples\n\n\n\n\nGeneral use.\n$ zcat hairpin.fa.gz | fakit shuffle -o shuffled.fa.gz\n[INFO] read sequences ...\n[INFO] 28645 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...\n\n\n\n\n\n\n\nlocate\n\n\nUsage\n\n\nlocate subsequences/motifs\n\nMotifs could be EITHER plain sequence containing \nACTGN\n OR regular\nexpression like \nA[TU]G(?:.{3})+?[TU](?:AG|AA|GA)\n for ORFs.\nDegenerate bases like \nRYMM..\n are also supported by flag -d.\n\nIn default, motifs are treated as regular expression.\nWhen flag -d given, regular expression may be wrong.\nFor example: \n\\w\n will be wrongly converted to \n\\[AT]\n.\n\nUsage:\n  fakit locate [flags]\n\nFlags:\n  -d, --degenerate             pattern/motif contains degenerate base\n  -i, --ignore-case            ignore case\n  -P, --only-positive-strand   only search at positive strand\n  -p, --pattern value          search pattern/motif (multiple values supported) (default [])\n  -f, --pattern-file string    pattern/motif file (FASTA format)\n\n\n\n\nExamples\n\n\n\n\n\n\nLocate ORFs.\n\n\n$ zcat hairpin.fa.gz | fakit locate -i -p \"A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)\" -j 4\nseqID   patternName     pattern strand  start   end     matched\ncel-lin-4       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        1  136      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGA\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        1  54       95      AUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAG\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        -1 43       51      AUGAUAUAG\n\n\n\n\n\n\n\nLocate Motif.\n\n\n$ zcat hairpin.fa.gz | fakit locate -i -p UUS -j 4\nseqID   patternName     pattern strand  start   end     matched\nbna-MIR396a     UUS     UUS     -1      105     107     UUS\nbna-MIR396a     UUS     UUS     -1      89      91      UUS\n\n\n\nNotice that \nfakit extract\n only searches in positive strand, but \nfakit loate\n could recogize both strand\n\n\n\n\n\n\nsliding\n\n\nUsage\n\n\nsliding sequences, circle genome supported\n\nUsage:\n  fakit sliding [flags]\n\nFlags:\n  -C, --circle-genome   circle genome\n  -s, --step int        step size\n  -W, --window int      window size\n\n\n\n\nExamples\n\n\n\n\n\n\nGeneral use\n\n\n$ echo -e \"\nseq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6\n\nseq sliding:1-6\nACGTac\n\nseq sliding:4-9\nTacgtN\n\n\n\n\n\n\n\nCircle genome\n\n\n$ echo -e \"\nseq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6 -C\n\nseq sliding:1-6\nACGTac\n\nseq sliding:4-9\nTacgtN\n\nseq sliding:7-2\ngtNNAC\n\nseq sliding:10-5\nNACGTa\n\n\n\n\n\n\n\nGenerate GC content for ploting\n\n\n$ zcat hairpin.fa.gz | fakit fa2tab | head -n 1 | fakit tab2fa | fakit sliding -s 5 -W 30 | fakit fa2tab  -n -g\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:1-30         50.00\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:6-35         46.67\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:11-40                43.33\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:16-45                36.67\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:21-50                33.33\n...", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage-and-examples", 
            "text": "", 
            "title": "Usage and Examples"
        }, 
        {
            "location": "/usage/#fakit", 
            "text": "Usage  fakit -- FASTA kit\n\nVersion: 0.1.1\n\nAuthor: Wei Shen  shenwei356@gmail.com \n\nDocuments  : http://shenwei356.github.io/fakit\nSource code: https://github.com/shenwei356/fakit\n\nUsage:\n  fakit [command]\n\nAvailable Commands:\n  common      find common sequences of multiple files by id/name/sequence\n  extract     extract sequences by pattern(s) of name or sequence motifs\n  fa2tab      covert FASTA to tabular format, and provide various information\n  locate      locate subsequences/motifs\n  rmdup       remove duplicated sequences by id/name/sequence\n  sample      sample sequences by number or proportion\n  seq         transform sequence (revserse, complement, extract ID...)\n  shuffle     shuffle sequences\n  sliding     sliding sequences, circle genome supported\n  split       split sequences into files by id/seq region/size/parts\n  stat        simple statistics of FASTA files\n  subseq      get subsequence by region\n  tab2fa      covert tabular format to FASTA format\n\nFlags:\n  -c, --chunk-size int     chunk size (attention: unit is FASTA records not lines) (default 100)\n      --id-regexp string   regular expression for parsing ID (default  ^([^\\\\s]+)\\\\s? )\n  -w, --line-width int     line width (0 for no wrap) (default 60)\n  -o, --out-file string    out file ( -  for stdout, suffix .gz for gzipped out) (default  - )\n      --quiet              be quiet and do not show extra information\n  -t, --seq-type string    sequence type (dna|rna|protein|unlimit|auto) (for auto, it automatically detect by the first sequence) (default  auto )\n  -j, --threads int        number of CPUs. since most of the subcommands are I/O intensive, so default value is 1. For computation intensive jobs, like extract and locate, you may set bigger value (default 1)\n\nUse  fakit [command] --help  for more information about a command.", 
            "title": "fakit"
        }, 
        {
            "location": "/usage/#performance-tips", 
            "text": "Since most of the subcommands are I/O intensive,\nso default value of flag -j (--threads) is 1.\nFor computation intensive jobs, like extract and locate,\n you may set a bigger value.  For example    Extract sequences by names or sequences using regular expression.  zcat hairpin.fa.gz | fakit extract -s -r -i -p TT[CG]AA -j 4    Locate sequence motifs  zcat hairpin.fa.gz | fakit extract -s -d -i -f motif.fa -j 4", 
            "title": "Performance Tips"
        }, 
        {
            "location": "/usage/#datasets", 
            "text": "Datasets are from  The miRBase Sequence Database -- Release 21   hairpin.fa.gz  mature.fa.gz  miRNA.diff.gz", 
            "title": "Datasets"
        }, 
        {
            "location": "/usage/#seq", 
            "text": "Usage  transform sequence (revserse, complement, extract ID...)\n\nUsage:\n  fakit seq [flags]\n\nFlags:\n  -p, --complement          complement sequence (blank for Protein sequence)\n  -G, --gap-letter string   gap letters (default  - )\n  -l, --lower-case          print sequences in lower case\n  -n, --name                only print names\n  -i, --only-id             print ID instead of full head\n  -g, --remove-gaps         remove gaps\n  -r, --reverse             reverse sequence)\n  -s, --seq                 only print sequences\n  -u, --upper-case          print sequences in upper case  Examples    Read and print    From file:  $ fakit seq hairpin.fa.gz cel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAAC\nUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA    From stdin:  zcat hairpin.fa.gz | fakit seq      Only print names    Full name:  $ fakit seq hairpin.fa.gz -n\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop    Only ID:  $ fakit seq hairpin.fa.gz -n -i\ncel-let-7\ncel-lin-4\ncel-mir-1    Custom ID region by regular expression (this could be applied to all subcommands):  $ fakit seq hairpin.fa.gz -n -i --id-regexp \"^[^\\s]+\\s([^\\s]+)\\s\"\nMI0000001\nMI0000002\nMI0000003      Only print seq (global flag -w defines the output line width, 0 for no wrap)  $ fakit seq hairpin.fa.gz -s -w 0\nUACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\nAUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU\nAAAGUGACCGUACCGAGCUGCAUACUUCCUUACAUGCCCAUACUAUAUCAUAAAUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAGU    Reverse comlement sequence  $ fakit seq hairpin.fa.gz -r -p cel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop\nUCGAAGAGUUCUGUCUCCGGUAAGGUAGAAAAUUGCAUAGUUCACCGGUGGUAAUAUUCC\nAAACUAUACAACCUACUACCUCACCGGAUCCACAGUGUA    Remove gaps and to lower/upper case  $ echo -e \" seq\\nACGT-ACTGC-ACC\" | fakit seq -i -g seq\nACGTACTGCACC", 
            "title": "seq"
        }, 
        {
            "location": "/usage/#subseq", 
            "text": "Usage  get subsequence by region.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 0-based index    0 1 2 3 4 5 6 7 8 9\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4        G T N\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit subseq [flags]\n\nFlags:\n  -r, --region string   subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases, 13:-1 for cutting first 12 bases. type  fakit subseq -h  for more examples  Examples    first 12 bases  $ zcat hairpin.fa.gz | fakit subseq -r 1:12    last 12 bases  $ zcat hairpin.fa.gz | fakit subseq -r -12:-1    subsequence without first and last 12 bases  $ zcat hairpin.fa.gz | fakit subseq -r 13:-13", 
            "title": "subseq"
        }, 
        {
            "location": "/usage/#stat", 
            "text": "Usage  simple statistics of FASTA files\n\nUsage:\n  fakit stat [flags]  Eexamples   General use $ fakit stat *.fa.gz\nfile    type    num_seqs        min_len avg_len max_len\nhairpin.fa.gz   RNA     28645   39      103.0   2354\nmature.fa.gz    RNA     35828   15      21.8    34", 
            "title": "stat"
        }, 
        {
            "location": "/usage/#fa2tab-fa2tab", 
            "text": "Usage (fa2tab)  covert FASTA to tabular format, and provide various information,\nlike sequence length, GC content/GC skew.\n\nUsage:\n  fakit fa2tab [flags]\n\nFlags:\n  -b, --base-content value   print base content. (case ignored, multiple values supported) e.g. -b AT -b N (default [])\n  -g, --gc                   print GC content\n  -G, --gc-skew              print GC-Skew\n  -l, --length               print sequence length\n  -n, --name                 only print names (no sequences)\n  -i, --only-id              print ID instead of full head\n  -T, --title                print title line  Usage (tab2fa)  covert tabular format (first two columns) to FASTA format\n\nUsage:\n  fakit tab2fa [flags]\n\nFlags:\n  -p, --comment-line-prefix value   comment line prefix (default [#,//])  Examples    Default output  $ fakit fa2tab hairpin.fa.gz\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop      UACACUGUGGAUCCGGUGAGGUAGUAGGUUGUAUAGUUUGGAAUAUUACCACCGGUGAACUAUGCAAUUUUCUACCUUACCGGAGACAGAACUCUUCGA\ncel-lin-4 MI0000002 Caenorhabditis elegans lin-4 stem-loop      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGAGUGUACUAUUGAUGCUUCACACCUGGGCUCUCCGGGUACCAGGACGGUUUGAGCAGAU\ncel-mir-1 MI0000003 Caenorhabditis elegans miR-1 stem-loop      AAAGUGACCGUACCGAGCUGCAUACUUCCUUACAUGCCCAUACUAUAUCAUAAAUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAGU    Print sequence length, GC content, and only print names (no sequences),\nwe could also print title line by flag  -T .  $ fakit fa2tab hairpin.fa.gz -i -l -g -n -T\n# name  seq     length  GC\ncel-let-7               99      43.43\ncel-lin-4               94      54.26\ncel-mir-1               96      40.62    Use fa2tab and tab2fa in pipe  $ zcat hairpin.fa.gz | fakit fa2tab | fakit tab2fa    Sort sequences by length  $ zcat hairpin.fa.gz | fakit fa2tab -l | sort -t\"`echo -e '\\t'`\" -n -k3,3 | fakit tab2fa cin-mir-4129 MI0015684 Ciona intestinalis miR-4129 stem-loop\nUUCGUUAUUGGAAGACCUUAGUCCGUUAAUAAAGGCAUC mmu-mir-7228 MI0023723 Mus musculus miR-7228 stem-loop\nUGGCGACCUGAACAGAUGUCGCAGUGUUCGGUCUCCAGU cin-mir-4103 MI0015657 Ciona intestinalis miR-4103 stem-loop\nACCACGGGUCUGUGACGUAGCAGCGCUGCGGGUCCGCUGU  Sorting or filtering by GC (or other base by -flag  -b ) content could also achieved in similar way.    Get first 1000 sequence  $ zcat hairpin.fa.gz | fakit fa2tab | head -n 1000 | fakit tab2fa", 
            "title": "fa2tab &amp; fa2tab"
        }, 
        {
            "location": "/usage/#extract", 
            "text": "Usage  extract sequences by pattern(s) of name or sequence motifs\n\nUsage:\n  fakit extract [flags]\n\nFlags:\n  -n, --by-name               match by full name instead of just id\n  -s, --by-seq                match by seq\n  -d, --degenerate            pattern/motif contains degenerate base\n      --delete-matched        delete matched pattern to speedup\n  -i, --ignore-case           ignore case\n  -v, --invert-match          invert the sense of matching, to select non-matching records\n  -p, --pattern value         search pattern (multiple values supported) (default [])\n  -f, --pattern-file string   pattern file\n  -r, --use-regexp            patterns are regular expression  Examples    Extract human hairpins (i.e. sequences with name starting with  hsa )  $ zcat hairpin.fa.gz | fakit extract -r -p ^hsa hsa-let-7a-1 MI0000060 Homo sapiens let-7a-1 stem-loop\nUGGGAUGAGGUAGUAGGUUGUAUAGUUUUAGGGUCACACCCACCACUGGGAGAUAACUAU\nACAAUCUACUGUCUUUCCUA hsa-let-7a-2 MI0000061 Homo sapiens let-7a-2 stem-loop\nAGGUUGAGGUAGUAGGUUGUAUAGUUUAGAAUUACAUCAAGGGAGAUAACUGUACAGCCU\nCCUAGCUUUCCU    Remove human and mice hairpins.  $ zcat hairpin.fa.gz | fakit extract -r -p ^hsa -p ^mmu -v    Extract new entries by information from miRNA.diff.gz    Get IDs of new entries.  $ zcat miRNA.diff.gz | grep ^# -v | grep NEW | cut -f 2   list\n$ more list\ncfa-mir-486\ncfa-mir-339-1\npmi-let-7    Extract by ID list file  $ zcat hairpin.fa.gz | fakit extract -f list   new.fa      Extract sequences starting with AGGCG  $ zcat hairpin.fa.gz | fakit extract -s -r -i -p ^aggcg -j 4    Extract sequences with TTSAA (AgsI digest site) in SEQUENCE. Base S stands for C or G.  $ zcat hairpin.fa.gz | fakit extract -s -d -i -p TTSAA -j 4  It's equal to but simpler than:  $ zcat hairpin.fa.gz | fakit extract -s -r -i -p TT[CG]AA", 
            "title": "extract"
        }, 
        {
            "location": "/usage/#common", 
            "text": "Usage  find common sequences of multiple files by id/name/sequence\n\nUsage:\n  fakit common [flags]\n\nFlags:\n  -n, --by-name       match by full name instead of just id\n  -s, --by-seq        match by sequence\n  -i, --ignore-case   ignore case  Examples    By ID (default)  fakit common file*.fa   common.fasta    By full name  fakit common file*.fa -n   common.fasta    By sequence  fakit common file*.fa -s   common.fasta", 
            "title": "common"
        }, 
        {
            "location": "/usage/#rmdup", 
            "text": "Usage  remove duplicated sequences by id/name/sequence\n\nUsage:\n  fakit rmdup [flags]\n\nFlags:\n  -n, --by-name       by full name instead of just id\n  -s, --by-seq        by seq\n  -i, --ignore-case   ignore case  Examples  Similar to  common .   General use $ zcat hairpin.fa.gz | fakit rmdup -s -o clean.fa.gz\n[INFO] 2226 duplicated records removed", 
            "title": "rmdup"
        }, 
        {
            "location": "/usage/#split", 
            "text": "Usage  split sequences into files by name ID, subsequence of given region,\npart size or number of parts.\n\nThe definition of region is 1-based and with some custom design.\n\nExamples:\n\n 0-based index    0 1 2 3 4 5 6 7 8 9\n 1-based index    1 2 3 4 5 6 7 8 9 10\nnegative index    0-9-8-7-6-5-4-3-2-1\n           seq    A C G T N a c g t n\n           1:1    A\n           2:4        G T N\n         -4:-2                c g t\n         -4:-1                c g t n\n         -1:-1                      n\n          2:-2      C G T N a c g t\n          1:-1    A C G T N a c g t n\n\nUsage:\n  fakit split [flags]\n\nFlags:\n  -i, --by-id              split squences according to sequence ID\n  -p, --by-part int        split squences into N parts\n  -r, --by-region string   split squences according to subsequence of given region. e.g 1:12 for first 12 bases, -12:-1 for last 12 bases. type  fakit split -h  for more example\n  -s, --by-size int        split squences into multi parts with N sequences\n  -d, --dry-run            dry run, just print message and no files will be created.\n  -m, --md5                use MD5 instead of region sequence in output file when using flag -r (--by-region)\n  -2, --two-pass           2-pass mode read files twice to lower memory usage. Not allowed when reading from stdin  Examples    Split sequences into parts with at most 10000 sequences  $ fakit split hairpin.fa.gz -s 10000\n[INFO] split into 10000 seqs per file\n[INFO] write 10000 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 10000 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 8645 sequences to file: hairpin.fa.part_003.gz    Split sequences into 4 parts  $ fakit split hairpin.fa.gz -p 4\n[INFO] split into 4 parts\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 7162 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_003.gz\n[INFO] write 7159 sequences to file: hairpin.fa.part_004.gz  To reduce memory usage when spliting big file, we could use flag  --two-pass  $ fakit split hairpin.fa.gz -p 4 -2\n[INFO] split into 4 parts\n[INFO] first pass: get seq number\n[INFO] seq number: 28645\n[INFO] second pass: read and split\n[INFO] write 7162 sequences to file: hairpin.fa.part_001.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_002.gz\n[INFO] write 7162 sequences to file: hairpin.fa.part_003.gz\n[INFO] write 7159 sequences to file: hairpin.fa.part_004.gz    Split sequences by species. i.e. by custom IDs (first three letters)  $ fakit split hairpin.fa.gz -i --id-regexp \"^([\\w]+)\\-\"\n[INFO] split by ID. idRegexp: ^([\\w]+)\\-\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 97 sequences to file: hairpin.fa.id_asu.gz\n[INFO] write 267 sequences to file: hairpin.fa.id_chi.gz\n[INFO] write 296 sequences to file: hairpin.fa.id_gra.gz\n...    Split sequences by sequence region (for example, sequence barcode)  $ fakit split hairpin.fa.gz -r 1:12\n[INFO] split by region: ^([^\\s]+)\\s?\n[INFO] read sequences ...\n[INFO] read 28645 sequences\n[INFO] write 1 sequences to file: hairpin.fa.region_1:12_UGUUUGCUCAGC.gz\n[INFO] write 1 sequences to file: hairpin.fa.region_1:12_GAAGAAGAAGAC.gz\n[INFO] write 4 sequences to file: hairpin.fa.region_1:12_UGAGUGUAGUGC.gz  If region is too long, we could use falg  -m , i.e. use MD5 instead of region sequence in output file.  Sequence suffix could be defined as  -r -12:-1", 
            "title": "split"
        }, 
        {
            "location": "/usage/#sample", 
            "text": "Usage  sample sequences by number or proportion.\n\nUsage:\n  fakit sample [flags]\n\nFlags:\n  -n, --number int         sample by number (result may not exactly match)\n  -p, --proportion float   sample by proportion\n  -s, --rand-seed int      rand seed for shuffle (default 11)\n  -2, --two-pass           2-pass mode read files twice to lower memory usage. Not allowed when reading from stdin  Examples    Sample by number  $ zcat hairpin.fa.gz | fakit sample -n 1000 -o sample.fa.gz\n[INFO] sample by number\n[INFO] 949 sequences outputed  To reduce memory usage when spliting big file, we could use flag  --two-pass    Sample by proportion  $ zcat hairpin.fa.gz | fakit sample -p 0.1 -o sample.fa.gz\n[INFO] sample by proportion\n[INFO] 2814 sequences outputed    Set rand seed to reproduce the result  $ zcat hairpin.fa.gz | fakit sample -p 0.1 -s 11    Most of the time, we could shuffle after sampling  $ zcat hairpin.fa.gz | fakit sample -p 0.1 | fakit shuffle -o sample.fa.gz", 
            "title": "sample"
        }, 
        {
            "location": "/usage/#shuffle", 
            "text": "Usage  shuffle sequences\n\nUsage:\n  fakit shuffle [flags]\n\nFlags:\n  -s, --rand-seed int   rand seed for shuffle (default 23)  Examples   General use. $ zcat hairpin.fa.gz | fakit shuffle -o shuffled.fa.gz\n[INFO] read sequences ...\n[INFO] 28645 sequences loaded\n[INFO] shuffle ...\n[INFO] output ...", 
            "title": "shuffle"
        }, 
        {
            "location": "/usage/#locate", 
            "text": "Usage  locate subsequences/motifs\n\nMotifs could be EITHER plain sequence containing  ACTGN  OR regular\nexpression like  A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)  for ORFs.\nDegenerate bases like  RYMM..  are also supported by flag -d.\n\nIn default, motifs are treated as regular expression.\nWhen flag -d given, regular expression may be wrong.\nFor example:  \\w  will be wrongly converted to  \\[AT] .\n\nUsage:\n  fakit locate [flags]\n\nFlags:\n  -d, --degenerate             pattern/motif contains degenerate base\n  -i, --ignore-case            ignore case\n  -P, --only-positive-strand   only search at positive strand\n  -p, --pattern value          search pattern/motif (multiple values supported) (default [])\n  -f, --pattern-file string    pattern/motif file (FASTA format)  Examples    Locate ORFs.  $ zcat hairpin.fa.gz | fakit locate -i -p \"A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)\" -j 4\nseqID   patternName     pattern strand  start   end     matched\ncel-lin-4       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        1  136      AUGCUUCCGGCCUGUUCCCUGAGACCUCAAGUGUGA\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        1  54       95      AUGGAUAUGGAAUGUAAAGAAGUAUGUAGAACGGGGUGGUAG\ncel-mir-1       A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        A[TU]G(?:.{3})+?[TU](?:AG|AA|GA)        -1 43       51      AUGAUAUAG    Locate Motif.  $ zcat hairpin.fa.gz | fakit locate -i -p UUS -j 4\nseqID   patternName     pattern strand  start   end     matched\nbna-MIR396a     UUS     UUS     -1      105     107     UUS\nbna-MIR396a     UUS     UUS     -1      89      91      UUS  Notice that  fakit extract  only searches in positive strand, but  fakit loate  could recogize both strand", 
            "title": "locate"
        }, 
        {
            "location": "/usage/#sliding", 
            "text": "Usage  sliding sequences, circle genome supported\n\nUsage:\n  fakit sliding [flags]\n\nFlags:\n  -C, --circle-genome   circle genome\n  -s, --step int        step size\n  -W, --window int      window size  Examples    General use  $ echo -e \" seq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6 seq sliding:1-6\nACGTac seq sliding:4-9\nTacgtN    Circle genome  $ echo -e \" seq\\nACGTacgtNN\" | fakit sliding -s 3 -W 6 -C seq sliding:1-6\nACGTac seq sliding:4-9\nTacgtN seq sliding:7-2\ngtNNAC seq sliding:10-5\nNACGTa    Generate GC content for ploting  $ zcat hairpin.fa.gz | fakit fa2tab | head -n 1 | fakit tab2fa | fakit sliding -s 5 -W 30 | fakit fa2tab  -n -g\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:1-30         50.00\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:6-35         46.67\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:11-40                43.33\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:16-45                36.67\ncel-let-7 MI0000001 Caenorhabditis elegans let-7 stem-loop sliding:21-50                33.33\n...", 
            "title": "sliding"
        }, 
        {
            "location": "/benchmark/", 
            "text": "Benchmark\n\n\nSoftwares\n\n\n\n\nfakit\n. (Go).\n  Version \nv0.1.2\n\n\npyfaidx\n. (Python).\n  Version \n0.4.7.1\n\n\nseqmagick\n. (Python).\n  Version 0.6.1\n\n\nseqtk\n. (C).\nVersion \n1.0-r82-dirty\n\n\n\n\nUnused:\n\n\n\n\nfasta_utilities\n. (Perl).  Very difficult to install.\n  Version\n  \n329f7ca\n\n\nfastx_toolkit\n. (Perl). Can't handle multi-line FASTA files.\nVersion \n0.0.13\n\n\n\n\nDatasets\n\n\nOriginal datasets included:\n\n\n\n\nSILVA_123_SSURef_tax_silva.fasta.gz\n\n\nhs_ref_GRCh38.p2_*.mfa.gz\n\n\n\n\nThey are so large, so only subsets are used.\n\n\n\n\n\n\ndataset_A\n. Sampling by proption of 0.1 for \nSILVA_123_SSURef_tax_silva.fasta.gz\n\n\nfakit sample SILVA_123_SSURef_tax_silva.fasta.gz -p 0.1 -o dataset_A.fa.gz\n\n\n\n\n\n\n\ndataset_B\n. Merging chr18,19,20,21,22,Y to a single file\n\n\nzcat hs_ref_GRCh38.p2_chr{18,19,20,21,22,Y}.mfa.gz | pigz -c \n dataset_B.fa.gz\n\n\n\n\n\n\n\nAnd some tools do not support RNA sequences,\n and are not able to directly read .gz file,\n so the files are uncompressed, and convert to DNA by \nfakit seq --rna2dna dataset_A.fa.gz \n dataset_A.fa\n.\n\n\n\n\n\n\n\n\nfile\n\n\ntype\n\n\nnum_seqs\n\n\nmin_len\n\n\navg_len\n\n\nmax_len\n\n\n\n\n\n\n\n\n\n\ndataset_A.fa (261.7M)\n\n\nDNA\n\n\n175364\n\n\n900\n\n\n1419.6\n\n\n3725\n\n\n\n\n\n\ndataset_B.fa (346.5M)\n\n\nDNA\n\n\n6\n\n\n46709983\n\n\n59698489.0\n\n\n80373285\n\n\n\n\n\n\n\n\nReverse Complement\n\n\nCommands\n\n\nBefore each run, run \nsu -c 'sync; echo 1 \n /proc/sys/vm/drop_caches'\n to empty page caches.\n\n\n\n\nfakit:   \nfor f in *.fa; do time fakit seq -r -p $f \n /dev/null; done\n\n\npyfaidx: \nfor f in *.fa; do time faidx -c -r $f \n /dev/null; done\n.\nfirst run creates fasta index file, and evaluate the second run.\n\n\nseqmagick: \nfor f in *.fa; do time seqmagick convert --reverse-complement $f - \n /dev/null; done\n\n\nseqtk:   \nfor f in *.fa; do time seqtk seq -r $f \n /dev/null; done\n\n\nrevcom_biogo\n using \nbiogo\n\n(\nsource\n, \nbinary\n ). (Go).\n\nfor f in *.fa; do time ./revcom_biogo $f \n /dev/null; done\n\n\n\n\nResults:\n\n\n\n\n\n\n\n\ndatasets\n\n\nfakit\n\n\npyfaidx\n\n\nseqmagick\n\n\nseqtk\n\n\nrevcom_biogo\n\n\n\n\n\n\n\n\n\n\ndataset_A.fa\n\n\n8.40s\n\n\n26.43s\n\n\n13.61s\n\n\n0.84s\n\n\n9.95s\n\n\n\n\n\n\ndataset_B.fa\n\n\n14.15s\n\n\n18.30s\n\n\n9.98s\n\n\n1.44s\n\n\n10.43s\n\n\n\n\n\n\n\n\nExtract sequencs by ID list\n\n\nID list\n\n\nID list comes from sampling 80% of dataset_A and shuffling. n=140261.\n\n\n$ fakit sample -p 0.8 dataset_A.fa | fakit shuffle | fakit seq -n -i \n ids.txt\n$ head -n 5 ids.txt\nGQ103704.1.1352\nFR853054.1.1478\nGU214562.1.1781\nDQ796266.1.1393\nHM309604.1.1340\n\n\n\nCommands\n\n\nBefore each run, run \nsu -c 'sync; echo 1 \n /proc/sys/vm/drop_caches'\n to empty page caches.\n\n\n\n\nfakit:\n\n\ndefault parameters: \ntime fakit extract -f ids.txt dataset_A.fa -j 1 -c 100 \n /dev/null\n\n\nsingle thread and bigger chunk-sze: \ntime fakit extract -f ids.txt dataset_A.fa -j 1 -c 10000 \n /dev/null\n;\n\n\nmultiple threads and bigger chunk-size: \ntime fakit extract -f ids.txt dataset_A.fa -j 4 -c 10000 \n /dev/null\n\n\n\n\n\n\npyfaidx: unsupported\n\n\nseqmagick: only support single pattern by \n--pattern-include\n\n\nseqtk: \ntime seqtk subseq dataset_A.fa ids.txt \n /dev/null\n\n\n\n\nResults\n\n\n\n\n\n\n\n\ndatasets\n\n\nfakit (-j 1 -c 100)\n\n\nfakit (-j 1 -c 10000)\n\n\nfakit (-j 4 -c 10000)\n\n\nseqtk\n\n\n\n\n\n\n\n\n\n\ndataset_A.fa\n\n\n7.87s\n\n\n6.14s\n\n\n4.72s\n\n\n2.34s\n\n\n\n\n\n\n\n\nDeduplication\n\n\nDataset\n\n\nNumber: 175364 + 17411 = 192775\n\n\n$ cat \n(fakit sample -p 0.1 dataset_A.fa) dataset_A.fa | fakit shuffle \n dataset_A_dup.fa\n\n\n\nUnique seqs:\n\n\n$ fakit fa2tab dataset_A_dup.fa  | cut -f 2 | sort | uniq | wc -l\n161864\n\n\n\nCommands\n\n\n\n\nfakit: \ntime fakit rmdup -s dataset_A_dup.fa \n /dev/null\n\n\nseqmagick: \ntime seqmagick convert --deduplicate-sequences dataset_A_dup.fa - \n /dev/null\n\n\n\n\nResults\n\n\n\n\n\n\n\n\ndatasets\n\n\nfakit\n\n\nseqmagick\n\n\n\n\n\n\n\n\n\n\ndataset_A.fa\n\n\n8.10s\n\n\n13.31s\n\n\n\n\n\n\n\n\nTODO", 
            "title": "Benchmark"
        }, 
        {
            "location": "/benchmark/#benchmark", 
            "text": "", 
            "title": "Benchmark"
        }, 
        {
            "location": "/benchmark/#softwares", 
            "text": "fakit . (Go).\n  Version  v0.1.2  pyfaidx . (Python).\n  Version  0.4.7.1  seqmagick . (Python).\n  Version 0.6.1  seqtk . (C).\nVersion  1.0-r82-dirty   Unused:   fasta_utilities . (Perl).  Very difficult to install.\n  Version\n   329f7ca  fastx_toolkit . (Perl). Can't handle multi-line FASTA files.\nVersion  0.0.13", 
            "title": "Softwares"
        }, 
        {
            "location": "/benchmark/#datasets", 
            "text": "Original datasets included:   SILVA_123_SSURef_tax_silva.fasta.gz  hs_ref_GRCh38.p2_*.mfa.gz   They are so large, so only subsets are used.    dataset_A . Sampling by proption of 0.1 for  SILVA_123_SSURef_tax_silva.fasta.gz  fakit sample SILVA_123_SSURef_tax_silva.fasta.gz -p 0.1 -o dataset_A.fa.gz    dataset_B . Merging chr18,19,20,21,22,Y to a single file  zcat hs_ref_GRCh38.p2_chr{18,19,20,21,22,Y}.mfa.gz | pigz -c   dataset_B.fa.gz    And some tools do not support RNA sequences,\n and are not able to directly read .gz file,\n so the files are uncompressed, and convert to DNA by  fakit seq --rna2dna dataset_A.fa.gz   dataset_A.fa .     file  type  num_seqs  min_len  avg_len  max_len      dataset_A.fa (261.7M)  DNA  175364  900  1419.6  3725    dataset_B.fa (346.5M)  DNA  6  46709983  59698489.0  80373285", 
            "title": "Datasets"
        }, 
        {
            "location": "/benchmark/#reverse-complement", 
            "text": "", 
            "title": "Reverse Complement"
        }, 
        {
            "location": "/benchmark/#commands", 
            "text": "Before each run, run  su -c 'sync; echo 1   /proc/sys/vm/drop_caches'  to empty page caches.   fakit:    for f in *.fa; do time fakit seq -r -p $f   /dev/null; done  pyfaidx:  for f in *.fa; do time faidx -c -r $f   /dev/null; done .\nfirst run creates fasta index file, and evaluate the second run.  seqmagick:  for f in *.fa; do time seqmagick convert --reverse-complement $f -   /dev/null; done  seqtk:    for f in *.fa; do time seqtk seq -r $f   /dev/null; done  revcom_biogo  using  biogo \n( source ,  binary  ). (Go). for f in *.fa; do time ./revcom_biogo $f   /dev/null; done", 
            "title": "Commands"
        }, 
        {
            "location": "/benchmark/#results", 
            "text": "datasets  fakit  pyfaidx  seqmagick  seqtk  revcom_biogo      dataset_A.fa  8.40s  26.43s  13.61s  0.84s  9.95s    dataset_B.fa  14.15s  18.30s  9.98s  1.44s  10.43s", 
            "title": "Results:"
        }, 
        {
            "location": "/benchmark/#extract-sequencs-by-id-list", 
            "text": "", 
            "title": "Extract sequencs by ID list"
        }, 
        {
            "location": "/benchmark/#id-list", 
            "text": "ID list comes from sampling 80% of dataset_A and shuffling. n=140261.  $ fakit sample -p 0.8 dataset_A.fa | fakit shuffle | fakit seq -n -i   ids.txt\n$ head -n 5 ids.txt\nGQ103704.1.1352\nFR853054.1.1478\nGU214562.1.1781\nDQ796266.1.1393\nHM309604.1.1340", 
            "title": "ID list"
        }, 
        {
            "location": "/benchmark/#commands_1", 
            "text": "Before each run, run  su -c 'sync; echo 1   /proc/sys/vm/drop_caches'  to empty page caches.   fakit:  default parameters:  time fakit extract -f ids.txt dataset_A.fa -j 1 -c 100   /dev/null  single thread and bigger chunk-sze:  time fakit extract -f ids.txt dataset_A.fa -j 1 -c 10000   /dev/null ;  multiple threads and bigger chunk-size:  time fakit extract -f ids.txt dataset_A.fa -j 4 -c 10000   /dev/null    pyfaidx: unsupported  seqmagick: only support single pattern by  --pattern-include  seqtk:  time seqtk subseq dataset_A.fa ids.txt   /dev/null", 
            "title": "Commands"
        }, 
        {
            "location": "/benchmark/#results_1", 
            "text": "datasets  fakit (-j 1 -c 100)  fakit (-j 1 -c 10000)  fakit (-j 4 -c 10000)  seqtk      dataset_A.fa  7.87s  6.14s  4.72s  2.34s", 
            "title": "Results"
        }, 
        {
            "location": "/benchmark/#deduplication", 
            "text": "", 
            "title": "Deduplication"
        }, 
        {
            "location": "/benchmark/#dataset", 
            "text": "Number: 175364 + 17411 = 192775  $ cat  (fakit sample -p 0.1 dataset_A.fa) dataset_A.fa | fakit shuffle   dataset_A_dup.fa  Unique seqs:  $ fakit fa2tab dataset_A_dup.fa  | cut -f 2 | sort | uniq | wc -l\n161864", 
            "title": "Dataset"
        }, 
        {
            "location": "/benchmark/#commands_2", 
            "text": "fakit:  time fakit rmdup -s dataset_A_dup.fa   /dev/null  seqmagick:  time seqmagick convert --deduplicate-sequences dataset_A_dup.fa -   /dev/null", 
            "title": "Commands"
        }, 
        {
            "location": "/benchmark/#results_2", 
            "text": "datasets  fakit  seqmagick      dataset_A.fa  8.10s  13.31s", 
            "title": "Results"
        }, 
        {
            "location": "/benchmark/#todo", 
            "text": "", 
            "title": "TODO"
        }, 
        {
            "location": "/extension/", 
            "text": "Extention\n\n\nTabular FASTA format\n\n\nAfter converting FASTA to tabular format with \nfakit fa2tab\n,\nit could be handled with CSV/TSV tools,\n e.g. \ndatakit\n (CSV/TSV file manipulation and more)\n\n\n\n\ncsv_grep\n\n(go version) or \ncsv_grep.py\n\n(python version), could be used to filter sequences (similar with \nfakit extract\n)\n\n\nintersection\n\ncomputates intersection of multiple files. It could achieve similar function\nas \nfakit common -n\n along with shell.\n\n\ncsv_join\n joins multiple CSV/TSV files by multiple IDs.\n\n\ncsv_melt\n\nprovides melt function, could be used in preparation of data for ploting.", 
            "title": "Extension"
        }, 
        {
            "location": "/extension/#extention", 
            "text": "", 
            "title": "Extention"
        }, 
        {
            "location": "/extension/#tabular-fasta-format", 
            "text": "After converting FASTA to tabular format with  fakit fa2tab ,\nit could be handled with CSV/TSV tools,\n e.g.  datakit  (CSV/TSV file manipulation and more)   csv_grep \n(go version) or  csv_grep.py \n(python version), could be used to filter sequences (similar with  fakit extract )  intersection \ncomputates intersection of multiple files. It could achieve similar function\nas  fakit common -n  along with shell.  csv_join  joins multiple CSV/TSV files by multiple IDs.  csv_melt \nprovides melt function, could be used in preparation of data for ploting.", 
            "title": "Tabular FASTA format"
        }
    ]
}